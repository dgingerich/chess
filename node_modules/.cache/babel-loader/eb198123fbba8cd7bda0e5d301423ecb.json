{"ast":null,"code":"import PawnFactory from \"./Pieces/Pawn\";\nimport RookFactory from \"./Pieces/Rook\";\nimport KnightFactory from \"./Pieces/Knight\";\nimport BishopFactory from \"./Pieces/Bishop\";\nimport QueenFactory from \"./Pieces/Queen\";\nimport KingFactory from \"./Pieces/King\";\n\nconst BoardFactory = () => {\n  const initializeBoard = () => {\n    /*return ([\r\n        [RookFactory('white'), KnightFactory('white'), BishopFactory('white'), QueenFactory('white'), KingFactory('white'), BishopFactory('white'), KnightFactory('white'), RookFactory('white')],\r\n        [PawnFactory('white'), PawnFactory('white'), PawnFactory('white'), PawnFactory('white'), PawnFactory('white'), PawnFactory('white'), PawnFactory('white'), PawnFactory('white')],\r\n        [null, null, null, null, null, null, null, null],\r\n        [null, null, null, null, null, null, null, null],\r\n        [null, null, null, null, null, null, null, null],\r\n        [null, null, null, null, null, null, null, null],\r\n        [PawnFactory('black'), PawnFactory('black'), PawnFactory('black'), PawnFactory('black'), PawnFactory('black'), PawnFactory('black'), PawnFactory('black'), PawnFactory('black')],\r\n        [RookFactory('black'), KnightFactory('black'), BishopFactory('black'), QueenFactory('black'), KingFactory('black'), BishopFactory('black'), KnightFactory('black'), RookFactory('black')],\r\n    ]);*/\n    return [[RookFactory('white'), PawnFactory('white'), null, null, null, null, PawnFactory('black'), RookFactory('black')], [KnightFactory('white'), PawnFactory('white'), null, null, null, null, PawnFactory('black'), KnightFactory('black')], [BishopFactory('white'), PawnFactory('white'), null, null, null, null, PawnFactory('black'), BishopFactory('black')], [QueenFactory('white'), PawnFactory('white'), null, null, null, null, PawnFactory('black'), QueenFactory('black')], [KingFactory('white'), PawnFactory('white'), null, null, null, null, PawnFactory('black'), KingFactory('black')], [BishopFactory('white'), PawnFactory('white'), null, null, null, null, PawnFactory('black'), BishopFactory('black')], [KnightFactory('white'), PawnFactory('white'), null, null, null, null, PawnFactory('black'), KnightFactory('black')], [RookFactory('white'), PawnFactory('white'), null, null, null, null, PawnFactory('black'), RookFactory('black')]];\n  };\n\n  const boardToString = board => {\n    let boardString = '';\n    let count = 0;\n    board.forEach(row => {\n      boardString = boardString.concat(`${count} `);\n      row.forEach(square => {\n        if (square === null) {\n          boardString = boardString.concat('null, ');\n        } else {\n          boardString = boardString.concat(`${square.piece}, `);\n        }\n      });\n      boardString = boardString.concat('\\n');\n      count = count + 1;\n    }); //Adds columns at bottom\n\n    boardString = boardString.concat(`   0    1     2     3     4      5      6      7`);\n    return boardString;\n  };\n\n  const generateMovesList = board => {\n    let movesList = [];\n\n    for (let x = 0; x < 8; x = x + 1) {\n      for (let y = 0; y < 8; y = y + 1) {\n        if (board[x][y] !== null) {\n          let position = [x, y];\n          movesList.push(board[x][y].generateMoves(board, position));\n        }\n      }\n    }\n  };\n\n  return Object.create({\n    board: initializeBoard(),\n\n    boardToString() {\n      return boardToString(this.board);\n    },\n\n    generateMovesList() {\n      return generateMovesList(this.board);\n    }\n\n  });\n};\n\n_c = BoardFactory;\nexport default BoardFactory;\n\nvar _c;\n\n$RefreshReg$(_c, \"BoardFactory\");","map":{"version":3,"sources":["C:/Users/dging/Programming/chess/src/model/Board.js"],"names":["PawnFactory","RookFactory","KnightFactory","BishopFactory","QueenFactory","KingFactory","BoardFactory","initializeBoard","boardToString","board","boardString","count","forEach","row","concat","square","piece","generateMovesList","movesList","x","y","position","push","generateMoves","Object","create"],"mappings":"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","sourcesContent":["import PawnFactory from \"./Pieces/Pawn\";\r\nimport RookFactory from \"./Pieces/Rook\";\r\nimport KnightFactory from \"./Pieces/Knight\";\r\nimport BishopFactory from \"./Pieces/Bishop\";\r\nimport QueenFactory from \"./Pieces/Queen\";\r\nimport KingFactory from \"./Pieces/King\";\r\n\r\nconst BoardFactory = () => {\r\n\r\n    const initializeBoard = () => {\r\n        /*return ([\r\n            [RookFactory('white'), KnightFactory('white'), BishopFactory('white'), QueenFactory('white'), KingFactory('white'), BishopFactory('white'), KnightFactory('white'), RookFactory('white')],\r\n            [PawnFactory('white'), PawnFactory('white'), PawnFactory('white'), PawnFactory('white'), PawnFactory('white'), PawnFactory('white'), PawnFactory('white'), PawnFactory('white')],\r\n            [null, null, null, null, null, null, null, null],\r\n            [null, null, null, null, null, null, null, null],\r\n            [null, null, null, null, null, null, null, null],\r\n            [null, null, null, null, null, null, null, null],\r\n            [PawnFactory('black'), PawnFactory('black'), PawnFactory('black'), PawnFactory('black'), PawnFactory('black'), PawnFactory('black'), PawnFactory('black'), PawnFactory('black')],\r\n            [RookFactory('black'), KnightFactory('black'), BishopFactory('black'), QueenFactory('black'), KingFactory('black'), BishopFactory('black'), KnightFactory('black'), RookFactory('black')],\r\n        ]);*/\r\n\r\n       return ([\r\n            [RookFactory('white'), PawnFactory('white'), null, null, null, null, PawnFactory('black'), RookFactory('black')],\r\n            [KnightFactory('white'), PawnFactory('white'), null, null, null, null, PawnFactory('black'), KnightFactory('black')],\r\n            [BishopFactory('white'), PawnFactory('white'), null, null, null, null, PawnFactory('black'), BishopFactory('black')],\r\n            [QueenFactory('white'), PawnFactory('white'), null, null, null, null, PawnFactory('black'), QueenFactory('black')],\r\n            [KingFactory('white'), PawnFactory('white'), null, null, null, null, PawnFactory('black'), KingFactory('black')],\r\n            [BishopFactory('white'), PawnFactory('white'), null, null, null, null, PawnFactory('black'), BishopFactory('black')],\r\n            [KnightFactory('white'), PawnFactory('white'), null, null, null, null, PawnFactory('black'), KnightFactory('black')],\r\n            [RookFactory('white'), PawnFactory('white'), null, null, null, null, PawnFactory('black'), RookFactory('black')],\r\n\r\n        ]); \r\n    };\r\n\r\n    const boardToString = (board) => {\r\n        \r\n        let boardString = '';\r\n        let count = 0;\r\n\r\n        board.forEach(row => {\r\n            boardString = boardString.concat(`${count} `);\r\n            row.forEach(square => {\r\n                if (square === null) {\r\n                    boardString = boardString.concat('null, ')\r\n                } else {\r\n                    boardString = boardString.concat(`${square.piece}, `);\r\n                }\r\n            })\r\n            boardString = boardString.concat('\\n');\r\n            count = count + 1;\r\n        });\r\n        \r\n        //Adds columns at bottom\r\n        boardString = boardString.concat(`   0    1     2     3     4      5      6      7`);\r\n\r\n        return (boardString);        \r\n    };\r\n\r\n    const generateMovesList = (board) => {\r\n\r\n        let movesList = [];\r\n\r\n        for (let x = 0; x < 8; x = x + 1) {\r\n            for (let y = 0; y < 8; y= y + 1) {\r\n                if (board[x][y] !== null) {\r\n                    let position = [x, y];\r\n                    movesList.push(board[x][y].generateMoves(board, position));\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return Object.create({\r\n        board: initializeBoard(),\r\n        boardToString() {\r\n            return boardToString(this.board);\r\n        },\r\n        generateMovesList() {\r\n            return generateMovesList(this.board);\r\n        }\r\n    });\r\n\r\n}\r\n\r\nexport default BoardFactory;"]},"metadata":{},"sourceType":"module"}