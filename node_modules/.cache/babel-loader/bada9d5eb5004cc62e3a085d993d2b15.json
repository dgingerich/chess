{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dging\\\\Programming\\\\chess\\\\src\\\\components\\\\Board.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Square from './Square';\nimport { PromotePawnOverlay } from './PromotePawnOverlay';\nimport ChessFactory from '../model/Chess';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Board = _ref => {\n  _s();\n\n  let {\n    chess\n  } = _ref;\n  const [board, setBoard] = useState(chess.board);\n  const [selectedSquare, setSelectedSquare] = useState(''); //this is used to promote pawns - if it is true, waits for user to select piece to promote to\n\n  const [promotePawn, setPromotePawn] = useState(chess.awaitingPawnPromotion);\n  useEffect(() => {\n    setPromotePawn(chess.awaitingPawnPromotion);\n  }, [chess.awaitingPawnPromotion]);\n  useEffect(() => {\n    if (chess.gameOver) alert(`Game over - ${chess.turn === 'white' ? 'black' : 'white'} wins!`);\n  }, [chess.gameOver]); //Determines whether to change selectedSquare\n\n  const handleClick = (x, y) => {\n    //If not waiting to promote pawn\n    if (!promotePawn) {\n      //If player clicks on a piece of their own color\n      if (board[x][y] !== null && board[x][y].color === chess.turn) {\n        setSelectedSquare([x, y]);\n      } //If selectedSquare isn't set and player hasn't clicked on a piece of their own color\n      else if (selectedSquare === '') {\n        return;\n      } else {\n        let move = chess.handleMove(selectedSquare, [x, y]);\n        setSelectedSquare('');\n      }\n    }\n  };\n\n  const handlePiecePromotion = selectedPromotion => {\n    chess.promotePawn(selectedPromotion);\n    setPromotePawn(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      marginTop: '5vh'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        borderStyle: 'solid',\n        borderWidth: '1.75px'\n      },\n      children: board.map((column, y) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex'\n          },\n          children: [column.map((square, x) => {\n            //row is 7 - y to make white on the bottom and black on top\n            //essentially iterates from top of board (black) down (white)\n            return /*#__PURE__*/_jsxDEV(Square, {\n              square: board[x][7 - y],\n              position: [x, y],\n              onClick: () => handleClick(x, 7 - y),\n              isSelected: selectedSquare[0] === x && selectedSquare[1] === 7 - y ? true : false\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 40\n            }, this);\n          }), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this), promotePawn ? /*#__PURE__*/_jsxDEV(PromotePawnOverlay, {\n      turn: chess.turn,\n      handleClick: handlePiecePromotion\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 28\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Board, \"Ma6D3bY/eR5esk54Mx1Yt44Dy40=\");\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["C:/Users/dging/Programming/chess/src/components/Board.js"],"names":["React","useState","useEffect","Square","PromotePawnOverlay","ChessFactory","Board","chess","board","setBoard","selectedSquare","setSelectedSquare","promotePawn","setPromotePawn","awaitingPawnPromotion","gameOver","alert","turn","handleClick","x","y","color","move","handleMove","handlePiecePromotion","selectedPromotion","display","justifyContent","alignItems","marginTop","borderStyle","borderWidth","map","column","square"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Square from './Square';\r\nimport { PromotePawnOverlay } from './PromotePawnOverlay';\r\nimport ChessFactory from '../model/Chess';\r\n\r\nconst Board = ({ chess }) => {\r\n\r\n    const [board, setBoard] = useState(chess.board);\r\n    const [selectedSquare, setSelectedSquare] = useState('');\r\n    //this is used to promote pawns - if it is true, waits for user to select piece to promote to\r\n    const [promotePawn, setPromotePawn] = useState(chess.awaitingPawnPromotion);\r\n\r\n    useEffect(() => {\r\n        setPromotePawn(chess.awaitingPawnPromotion);\r\n    }, [chess.awaitingPawnPromotion])\r\n\r\n    useEffect(() => {\r\n        if (chess.gameOver) alert(`Game over - ${chess.turn === 'white' ? 'black': 'white'} wins!`);\r\n    }, [chess.gameOver])\r\n\r\n    //Determines whether to change selectedSquare\r\n    const handleClick = (x, y) => {\r\n        //If not waiting to promote pawn\r\n        if (!promotePawn) {\r\n        //If player clicks on a piece of their own color\r\n            if (board[x][y] !== null && board[x][y].color === chess.turn) {\r\n                setSelectedSquare([x, y]);\r\n            } //If selectedSquare isn't set and player hasn't clicked on a piece of their own color\r\n            else if (selectedSquare === '') {\r\n                return;\r\n            } else {\r\n                let move = chess.handleMove(selectedSquare, [x, y]);\r\n                setSelectedSquare('');\r\n            }\r\n        }\r\n    }\r\n\r\n    const handlePiecePromotion = (selectedPromotion) => {\r\n        chess.promotePawn(selectedPromotion);\r\n        setPromotePawn(false);\r\n    }\r\n\r\n    return (\r\n        <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', marginTop: '5vh'}}>\r\n            <div style={{borderStyle: 'solid', borderWidth: '1.75px'}}>\r\n                {board.map((column, y) => {\r\n                    return (\r\n                        <div style={{ display: 'flex' }}>\r\n                            {column.map((square, x) => {\r\n                                //row is 7 - y to make white on the bottom and black on top\r\n                                //essentially iterates from top of board (black) down (white)\r\n                                return <Square square={board[x][7 - y]} position={[x, y]} onClick={() => handleClick(x, 7 - y)} isSelected={((selectedSquare[0] === x) && (selectedSquare[1] === 7 - y)) ? true : false} />\r\n                            })}\r\n                            <br />\r\n                        </div>\r\n                    )\r\n                })}\r\n            </div>\r\n            {promotePawn ? <PromotePawnOverlay turn={chess.turn} handleClick={handlePiecePromotion} /> : null}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Board;"]},"metadata":{},"sourceType":"module"}