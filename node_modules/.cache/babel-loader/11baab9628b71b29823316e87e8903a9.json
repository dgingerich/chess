{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dging\\\\Programming\\\\chess\\\\src\\\\components\\\\Board.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Square from './Square';\nimport { PromotePawnOverlay } from './PromotePawnOverlay';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Board = _ref => {\n  _s();\n\n  let {\n    chess\n  } = _ref;\n  const [board, setBoard] = useState(chess.board);\n  const [selectedSquare, setSelectedSquare] = useState(''); //this is used to promote pawns - if it is true, waits for user to select piece to promote to\n\n  const [promotePawn, setPromotePawn] = useState(false);\n\n  const printSquare = (x, y) => {\n    console.log([x, y]);\n\n    try {\n      console.log(board[x][y].color + ' ' + board[x][y].piece);\n    } catch {\n      console.log('Empty');\n    }\n  }; //Determines whether to change selectedSquare\n\n\n  const handleClick = (x, y) => {\n    //If player clicks on a piece of their own color\n    if (board[x][y] !== null && board[x][y].color === chess.turn) {\n      setSelectedSquare([x, y]);\n    } //If selectedSquare isn't set and player hasn't clicked on a piece of their own color\n    else if (selectedSquare === '') {\n      return;\n    } else {\n      let move = chess.handleMove(selectedSquare, [x, y]);\n      setSelectedSquare('');\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [board.map((column, y) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex'\n        },\n        children: [column.map((square, x) => {\n          //row is 7 - y to make white on the bottom and black on top\n          //essentially iterates from top of board (black) down (white)\n          return /*#__PURE__*/_jsxDEV(Square, {\n            square: board[x][7 - y],\n            position: [x, y],\n            onClick: () => handleClick(x, 7 - y),\n            isSelected: selectedSquare[0] === x && selectedSquare[1] === 7 - y ? true : false\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 36\n          }, this);\n        }), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 21\n      }, this);\n    }), promotePawn ? /*#__PURE__*/_jsxDEV(PromotePawnOverlay, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 28\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Board, \"DSGH7aasG4XSbHiPs9eRTuL/fI4=\");\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["C:/Users/dging/Programming/chess/src/components/Board.js"],"names":["React","useState","useEffect","Square","PromotePawnOverlay","Board","chess","board","setBoard","selectedSquare","setSelectedSquare","promotePawn","setPromotePawn","printSquare","x","y","console","log","color","piece","handleClick","turn","move","handleMove","map","column","display","square"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,SAASC,kBAAT,QAAmC,sBAAnC;;;AAEA,MAAMC,KAAK,GAAG,QAAe;AAAA;;AAAA,MAAd;AAAEC,IAAAA;AAAF,GAAc;AAEzB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAACK,KAAK,CAACC,KAAP,CAAlC;AACA,QAAM,CAACE,cAAD,EAAiBC,iBAAjB,IAAsCT,QAAQ,CAAC,EAAD,CAApD,CAHyB,CAIzB;;AACA,QAAM,CAACU,WAAD,EAAcC,cAAd,IAAgCX,QAAQ,CAAC,KAAD,CAA9C;;AAEA,QAAMY,WAAW,GAAG,CAACC,CAAD,EAAIC,CAAJ,KAAU;AAC1BC,IAAAA,OAAO,CAACC,GAAR,CAAY,CAACH,CAAD,EAAIC,CAAJ,CAAZ;;AACA,QAAI;AACJC,MAAAA,OAAO,CAACC,GAAR,CAAYV,KAAK,CAACO,CAAD,CAAL,CAASC,CAAT,EAAYG,KAAZ,GAAoB,GAApB,GAA0BX,KAAK,CAACO,CAAD,CAAL,CAASC,CAAT,EAAYI,KAAlD;AACC,KAFD,CAEE,MAAM;AACJH,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACH;AACJ,GAPD,CAPyB,CAgBzB;;;AACA,QAAMG,WAAW,GAAG,CAACN,CAAD,EAAIC,CAAJ,KAAU;AAC1B;AACA,QAAIR,KAAK,CAACO,CAAD,CAAL,CAASC,CAAT,MAAgB,IAAhB,IAAwBR,KAAK,CAACO,CAAD,CAAL,CAASC,CAAT,EAAYG,KAAZ,KAAsBZ,KAAK,CAACe,IAAxD,EAA8D;AAC1DX,MAAAA,iBAAiB,CAAC,CAACI,CAAD,EAAIC,CAAJ,CAAD,CAAjB;AACH,KAFD,CAEE;AAFF,SAGK,IAAIN,cAAc,KAAK,EAAvB,EAA2B;AAC5B;AACH,KAFI,MAEE;AACH,UAAIa,IAAI,GAAGhB,KAAK,CAACiB,UAAN,CAAiBd,cAAjB,EAAiC,CAACK,CAAD,EAAIC,CAAJ,CAAjC,CAAX;AACAL,MAAAA,iBAAiB,CAAC,EAAD,CAAjB;AACH;AACJ,GAXD;;AAcA,sBACI;AAAA,eACKH,KAAK,CAACiB,GAAN,CAAU,CAACC,MAAD,EAASV,CAAT,KAAe;AACtB,0BACI;AAAK,QAAA,KAAK,EAAE;AAAEW,UAAAA,OAAO,EAAE;AAAX,SAAZ;AAAA,mBACKD,MAAM,CAACD,GAAP,CAAW,CAACG,MAAD,EAASb,CAAT,KAAe;AACvB;AACA;AACA,8BAAO,QAAC,MAAD;AAAQ,YAAA,MAAM,EAAEP,KAAK,CAACO,CAAD,CAAL,CAAS,IAAIC,CAAb,CAAhB;AAAiC,YAAA,QAAQ,EAAE,CAACD,CAAD,EAAIC,CAAJ,CAA3C;AAAmD,YAAA,OAAO,EAAE,MAAMK,WAAW,CAACN,CAAD,EAAI,IAAIC,CAAR,CAA7E;AAAyF,YAAA,UAAU,EAAIN,cAAc,CAAC,CAAD,CAAd,KAAsBK,CAAvB,IAA8BL,cAAc,CAAC,CAAD,CAAd,KAAsB,IAAIM,CAAzD,GAA+D,IAA/D,GAAsE;AAA3K;AAAA;AAAA;AAAA;AAAA,kBAAP;AACH,SAJA,CADL,eAMI;AAAA;AAAA;AAAA;AAAA,gBANJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ;AAUH,KAXA,CADL,EAaKJ,WAAW,gBAAG,QAAC,kBAAD;AAAA;AAAA;AAAA;AAAA,YAAH,GAA2B,IAb3C;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAiBH,CAhDD;;GAAMN,K;;KAAAA,K;AAkDN,eAAeA,KAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Square from './Square';\r\nimport { PromotePawnOverlay } from './PromotePawnOverlay';\r\n\r\nconst Board = ({ chess }) => {\r\n\r\n    const [board, setBoard] = useState(chess.board);\r\n    const [selectedSquare, setSelectedSquare] = useState('');\r\n    //this is used to promote pawns - if it is true, waits for user to select piece to promote to\r\n    const [promotePawn, setPromotePawn] = useState(false);\r\n\r\n    const printSquare = (x, y) => {\r\n        console.log([x, y]);\r\n        try {\r\n        console.log(board[x][y].color + ' ' + board[x][y].piece);\r\n        } catch {\r\n            console.log('Empty')\r\n        }\r\n    }\r\n\r\n    //Determines whether to change selectedSquare\r\n    const handleClick = (x, y) => {\r\n        //If player clicks on a piece of their own color\r\n        if (board[x][y] !== null && board[x][y].color === chess.turn) {\r\n            setSelectedSquare([x, y]);\r\n        } //If selectedSquare isn't set and player hasn't clicked on a piece of their own color\r\n        else if (selectedSquare === '') {\r\n            return;\r\n        } else {\r\n            let move = chess.handleMove(selectedSquare, [x, y]);\r\n            setSelectedSquare('');\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            {board.map((column, y) => {\r\n                return (\r\n                    <div style={{ display: 'flex' }}>\r\n                        {column.map((square, x) => {\r\n                            //row is 7 - y to make white on the bottom and black on top\r\n                            //essentially iterates from top of board (black) down (white)\r\n                            return <Square square={board[x][7 - y]} position={[x, y]} onClick={() => handleClick(x, 7 - y)} isSelected={((selectedSquare[0] === x) && (selectedSquare[1] === 7 - y)) ? true : false} />\r\n                        })}\r\n                        <br />\r\n                    </div>\r\n                )\r\n            })}\r\n            {promotePawn ? <PromotePawnOverlay/> : null}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Board;"]},"metadata":{},"sourceType":"module"}