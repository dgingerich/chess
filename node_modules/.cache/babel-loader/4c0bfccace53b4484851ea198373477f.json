{"ast":null,"code":"const KnightFactory = color => {\n  //Generates moves in a certain direction in increments\n  const generateMoves = (board, position, color, xincrement, yincrement) => {\n    let moves = [];\n    let x = position[0] + xincrement;\n    let y = position[1] + yincrement;\n\n    if (x >= 0 && x < 8 && y >= 0 && y < 8) {\n      //If the space is not empty\n      if (board[x][y] !== null) {\n        if (board[x][y].color !== color) {\n          moves.push([position, [x, y]]);\n        }\n      } //If the space is empty add as a legal move \n      else {\n        moves.push([position, [x, y]]);\n      }\n    }\n\n    return moves;\n  };\n\n  return Object.create({\n    color: color,\n    piece: 'Knight',\n\n    //Position a two value array starting from lower left quadrant\n    getMoves(board, position) {\n      let moves = []; //Moves up and right\n\n      moves = moves.concat(generateMoves(board, position, color, 1, 2)); //Moves up and left\n\n      moves = moves.concat(generateMoves(board, position, color, -1, 2)); //Moves right and up\n\n      moves = moves.concat(generateMoves(board, position, color, 2, 1)); //Moves right and down\n\n      moves = moves.concat(generateMoves(board, position, color, 2, -1)); //Moves down and right\n\n      moves = moves.concat(generateMoves(board, position, color, 1, -2)); //Moves down and left\n\n      moves = moves.concat(generateMoves(board, position, color, -1, -2)); //Moves left and up\n\n      moves = moves.concat(generateMoves(board, position, color, -2, 1)); //Moves left and down\n\n      moves = moves.concat(generateMoves(board, position, color, -2, -1));\n      return moves;\n    }\n\n  });\n};\n\n_c = KnightFactory;\nexport default KnightFactory;\n\nvar _c;\n\n$RefreshReg$(_c, \"KnightFactory\");","map":{"version":3,"sources":["C:/Users/dging/Programming/chess/src/model/Pieces/Knight.js"],"names":["KnightFactory","color","generateMoves","board","position","xincrement","yincrement","moves","x","y","push","Object","create","piece","getMoves","concat"],"mappings":"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","sourcesContent":["\r\nconst KnightFactory = (color) => {\r\n\r\n    //Generates moves in a certain direction in increments\r\n    const generateMoves = (board, position, color, xincrement, yincrement) => {\r\n        let moves = [];\r\n        let x = position[0] + xincrement;\r\n        let y = position[1] + yincrement;\r\n\r\n        if (x >= 0 && x < 8 && y >= 0 && y < 8) {\r\n            //If the space is not empty\r\n            if (board[x][y] !== null) {\r\n                if (board[x][y].color !== color) {\r\n                    moves.push([position, [x, y]]);\r\n                }\r\n            } //If the space is empty add as a legal move \r\n            else {\r\n                moves.push([position, [x, y]]);\r\n            }\r\n        }\r\n\r\n        return moves;\r\n    }\r\n\r\n    return Object.create({\r\n        color: color,\r\n        piece: 'Knight',\r\n\r\n        //Position a two value array starting from lower left quadrant\r\n        getMoves(board, position) {\r\n            let moves = [];\r\n            //Moves up and right\r\n            moves = moves.concat(generateMoves(board, position, color, 1, 2));\r\n            //Moves up and left\r\n            moves = moves.concat(generateMoves(board, position, color, -1, 2));\r\n            //Moves right and up\r\n            moves = moves.concat(generateMoves(board, position, color, 2, 1));\r\n            //Moves right and down\r\n            moves = moves.concat(generateMoves(board, position, color, 2, -1));\r\n            //Moves down and right\r\n            moves = moves.concat(generateMoves(board, position, color, 1, -2));\r\n            //Moves down and left\r\n            moves = moves.concat(generateMoves(board, position, color, -1, -2));\r\n            //Moves left and up\r\n            moves = moves.concat(generateMoves(board, position, color, -2, 1));\r\n            //Moves left and down\r\n            moves = moves.concat(generateMoves(board, position, color, -2, -1));\r\n            return moves;\r\n        }\r\n    })\r\n}\r\n\r\nexport default KnightFactory;"]},"metadata":{},"sourceType":"module"}