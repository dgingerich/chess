{"ast":null,"code":"import PawnFactory from \"./Pieces/Pawn\";\nimport RookFactory from \"./Pieces/Rook\";\nimport KnightFactory from \"./Pieces/Knight\";\nimport BishopFactory from \"./Pieces/Bishop\";\nimport QueenFactory from \"./Pieces/Queen\";\nimport KingFactory from \"./Pieces/King\";\nimport deepCopy from \"./core/deepCopy\";\n\nconst ChessFactory = () => {\n  const initializeBoard = () => {\n    return [[RookFactory('white'), PawnFactory('white'), null, null, null, null, PawnFactory('black'), RookFactory('black')], [KnightFactory('white'), PawnFactory('white'), null, null, null, null, PawnFactory('black'), KnightFactory('black')], [BishopFactory('white'), PawnFactory('white'), null, null, null, null, PawnFactory('black'), BishopFactory('black')], [QueenFactory('white'), PawnFactory('white'), null, null, null, null, PawnFactory('black'), QueenFactory('black')], [KingFactory('white'), PawnFactory('white'), null, null, null, null, PawnFactory('black'), KingFactory('black')], [null, PawnFactory('white'), null, null, null, null, PawnFactory('black'), BishopFactory('black')], [KnightFactory('white'), PawnFactory('white'), null, null, null, null, PawnFactory('black'), KnightFactory('black')], [RookFactory('white'), PawnFactory('white'), null, null, null, null, PawnFactory('black'), RookFactory('black')]];\n  }; //Generates list of moves given a board setup and the color of the current turn\n  //Checks if player is in check after move\n\n\n  const generateImmediateMoves = (board, turn) => {\n    let movesList = [];\n\n    for (let x = 0; x < 8; x = x + 1) {\n      for (let y = 0; y < 8; y = y + 1) {\n        if (board[x][y] !== null && board[x][y].color === turn) {\n          let position = [x, y];\n          movesList = movesList.concat(board[x][y].getMoves(board, position));\n        }\n      }\n    }\n\n    return movesList;\n  }; //Generates list of legal moves, given the current turn and board\n  //Legal move takes the form of [initialPosition, finalPosition]\n\n\n  const generateLegalMovesList = (board, turn, moveHistory) => {\n    let legalMovesList = generateImmediateMoves(board, turn);\n    let illegalMovesList = []; //Loops through all moves and generates a new board for after each move\n    //Checks if player is in check \n    //If any of the opposing player's possible moves on the new board attack the player's king, move is illegal\n    //Adds illigal moves to illegalMovesList, then removes moves in illegalMovesList from movesList\n\n    for (let i = 0; i < legalMovesList.length; i = i + 1) {\n      let move = legalMovesList[i];\n      let resultingBoard = deepCopy(board);\n      let positionOfKingOnResultingBoard;\n      let nextTurn = turn === 'white' ? 'black' : 'white'; //resultingBoard is the board after the current move being looped has been played\n\n      resultingBoard[move[1][0]][move[1][1]] = resultingBoard[move[0][0]][move[0][1]];\n      resultingBoard[move[0][0]][move[0][1]] = null; //Gets location of current player's king on resultingBoard\n\n      for (let x = 0; x < 8; x = x + 1) {\n        for (let y = 0; y < 8; y = y + 1) {\n          if (resultingBoard[x][y] !== null && resultingBoard[x][y].color === turn && resultingBoard[x][y].piece === 'King') {\n            positionOfKingOnResultingBoard = [x, y];\n          }\n        }\n      }\n\n      let inCheck = false;\n      let nextTurnMovesList = generateImmediateMoves(resultingBoard, nextTurn);\n      nextTurnMovesList.forEach(move => {\n        if (JSON.stringify(move[1]) === JSON.stringify(positionOfKingOnResultingBoard)) inCheck = true;\n      });\n      if (inCheck) illegalMovesList.push(legalMovesList[i]);\n    }\n\n    ; //Adds castling moves\n\n    checkForCastle(board, turn, moveHistory).forEach(castleMove => {\n      legalMovesList.push(castleMove);\n    }); //Filters movesList to only include moves that are not in illegalMovesList\n\n    legalMovesList = legalMovesList.filter(move => !illegalMovesList.includes(move));\n    return legalMovesList;\n  };\n\n  const checkForCastle = (board, turn, moveHistory) => {\n    let legalCastlingMoves = [];\n    let ARookInitialPosition = turn === 'white' ? [0, 0] : [0, 7];\n    let HRookInitialPosition = turn === 'white' ? [7, 0] : [7, 7];\n    let kingInitialPosition = turn === 'white' ? [4, 0] : [4, 7]; //King castling long\n\n    if (castleMoveLegal(kingInitialPosition, ARookInitialPosition, board, turn, moveHistory)) {\n      legalCastlingMoves.push( //2D move. First is king, second is rook\n      ['castle', [kingInitialPosition, [kingInitialPosition[0] - 2, kingInitialPosition[1]]], [ARookInitialPosition, [ARookInitialPosition[0] + 3, ARookInitialPosition[1]]]]);\n    } //King castling short\n\n\n    if (castleMoveLegal(kingInitialPosition, HRookInitialPosition, board, turn, moveHistory)) {\n      legalCastlingMoves.push( //2D move. First is king, second is rook\n      ['castle', [kingInitialPosition, [kingInitialPosition[0] + 2, kingInitialPosition[1]]], [HRookInitialPosition, [HRookInitialPosition[0] - 2, ARookInitialPosition[1]]]]);\n    }\n\n    return legalCastlingMoves;\n  }; //Checks if castling move is legal, given rook/king pair to castle\n\n\n  const castleMoveLegal = (kingInitialPosition, rookInitialPosition, board, turn, moveHistory) => {\n    let kingHasMoved = hasPieceMoved(kingInitialPosition, moveHistory);\n    let rookHasMoved = hasPieceMoved(rookInitialPosition, moveHistory);\n\n    if (!kingHasMoved && !rookHasMoved) {\n      let squaresKingGoesThrough = []; //Are there pieces between king and rook?\n\n      let squaresBetweenOccupied = false; //Loops through all squares between x value of king's initial position and rook's initial position\n\n      for (let x = kingInitialPosition[0] > rookInitialPosition[0] ? kingInitialPosition[0] - 1 : rookInitialPosition[0] - 1; x !== 4 && x !== 0; x = x - 1) {\n        //King moves two squares. If square is within 2 of king initial square, push to squaresKingGoesThrough\n        if (Math.abs(kingInitialPosition[0] - x) <= 2) squaresKingGoesThrough.push([x, kingInitialPosition[1]]); //If square has a piece, the squares between are occupied\n\n        if (board[x][kingInitialPosition[1]] !== null) squaresBetweenOccupied = true;\n      } //if no positions between them have a piece, check if any squares the king passes are in check\n\n\n      if (!squaresBetweenOccupied) {\n        console.log(squaresKingGoesThrough); //Generates other player's moves\n\n        let otherTurnMoves = generateImmediateMoves(board, turn === 'white' ? 'black' : 'white');\n        console.log(otherTurnMoves);\n        let anyKingSquaresInCheck = false;\n        otherTurnMoves.forEach(move => {\n          squaresKingGoesThrough.forEach(squareKingGoesThrough => {\n            if (JSON.stringify(move[1]) === JSON.stringify(squareKingGoesThrough)) anyKingSquaresInCheck = true;\n          });\n        }); //Only returns true if 1) no pieces are between and 2) no squares the king goes through are in check\n        //Already checked for no pieces between, so returns value of statement \"no squares the king goes through are in check\"\n\n        return anyKingSquaresInCheck === false;\n      }\n    } else {\n      return false;\n    } //Need logic to handle castling moves in legalMovesList\n    //Probably just if any move is a 2d array, both moves are made\n    //Since castling should really only be the only move with two moves\n    //Unless pawn promotion also has two moves? \n\n  }; //Checks if piece has moved, given initial position and history of moves\n\n\n  const hasPieceMoved = (initialPosition, moveHistory) => {\n    let hasMoved = false;\n    moveHistory.forEach(move => {\n      if (JSON.stringify(move[0]) === JSON.stringify(initialPosition)) hasMoved = true;\n    });\n    return hasMoved;\n  }; //Checks if move is in list of legal moves\n  //Returns string. String can be 'invalid', 'normal', 'castle', 'en passant'\n\n\n  const moveIsInMovesList = (position1, position2, movesList) => {\n    let moveInMovesList = 'invalid';\n    movesList.forEach(move => {\n      if (JSON.stringify(move) === JSON.stringify([position1, position2])) moveInMovesList = 'normal'; //Checks for castling or en passant, which are 2D arrays\n      //Type of move is stored at move[0]\n\n      if (typeof move[0] === 'string' && JSON.stringify(move[1]) === JSON.stringify([position1, position2])) moveInMovesList = move[0];\n    });\n    return moveInMovesList;\n  }; //Makes move on board, adds move to history\n\n\n  const move = (moveType, position1, position2, board) => {\n    switch (moveType) {\n      case 'normal':\n        //Sets position2 equal to value of position1\n        board[position2[0]][position2[1]] = board[position1[0]][position1[1]]; //Clears position1\n\n        board[position1[0]][position1[1]] = null;\n        break;\n\n      case 'castle':\n        //Moves king\n        board[position2[0]][position2[1]] = board[position1[0]][position1[1]]; //Set original king position to null\n\n        board[position1[0]][position1[1]] = null; //Move rooks based on side castling to (found based on position2[0], which gives column king moves to)\n        //Position2[1] will always give the row\n        //Castle long\n\n        if (position2[0] === 2) {\n          //Moves rook\n          board[3][position2[1]] = board[0][position2[1]]; //Sets rook initial position to null\n\n          board[0][position2[1]] = null;\n        } //Castle short\n        else {\n          //Moves rook\n          board[5][position2[1]] = board[7][position2[1]]; //Sets rook initial position to null\n\n          board[7][position2[1]] = null;\n        }\n\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const endGame = turn => {\n    alert('End Game');\n  };\n\n  return Object.create({\n    board: initializeBoard(),\n    turn: 'white',\n    legalMovesList: generateImmediateMoves(initializeBoard(), 'white'),\n    moveHistory: [],\n\n    //I'll need to add functions for castling/converting pawn on end rank (should both of those go here?)\n    handleMove(position1, position2) {\n      let moveType = moveIsInMovesList(position1, position2, this.legalMovesList); //If move is in list of legal moves\n\n      if (moveType !== 'invalid') {\n        //Makes move on board\n        move(moveType, position1, position2, this.board, this.moveHistory); //Adds move to move history\n\n        this.moveHistory.push([position1, position2]); //Changes turn\n\n        this.turn === 'white' ? this.turn = 'black' : this.turn = 'white'; //Re-generates movesList for new board and turn\n\n        this.legalMovesList = generateLegalMovesList(this.board, this.turn, this.moveHistory); //if there are no legal moves, the turn at the beginning of the function wins\n\n        if (this.legalMovesList.length === 0) endGame();\n      }\n    },\n\n    printMoves() {\n      this.generateLegalMovesList(this.board, this.turn);\n      console.log(this.legalMovesList);\n    }\n\n  });\n};\n\n_c = ChessFactory;\nexport default ChessFactory;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChessFactory\");","map":{"version":3,"sources":["C:/Users/dging/Programming/chess/src/model/Chess.js"],"names":["PawnFactory","RookFactory","KnightFactory","BishopFactory","QueenFactory","KingFactory","deepCopy","ChessFactory","initializeBoard","generateImmediateMoves","board","turn","movesList","x","y","color","position","concat","getMoves","generateLegalMovesList","moveHistory","legalMovesList","illegalMovesList","i","length","move","resultingBoard","positionOfKingOnResultingBoard","nextTurn","piece","inCheck","nextTurnMovesList","forEach","JSON","stringify","push","checkForCastle","castleMove","filter","includes","legalCastlingMoves","ARookInitialPosition","HRookInitialPosition","kingInitialPosition","castleMoveLegal","rookInitialPosition","kingHasMoved","hasPieceMoved","rookHasMoved","squaresKingGoesThrough","squaresBetweenOccupied","Math","abs","console","log","otherTurnMoves","anyKingSquaresInCheck","squareKingGoesThrough","initialPosition","hasMoved","moveIsInMovesList","position1","position2","moveInMovesList","moveType","endGame","alert","Object","create","handleMove","printMoves"],"mappings":"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","sourcesContent":["import PawnFactory from \"./Pieces/Pawn\";\r\nimport RookFactory from \"./Pieces/Rook\";\r\nimport KnightFactory from \"./Pieces/Knight\";\r\nimport BishopFactory from \"./Pieces/Bishop\";\r\nimport QueenFactory from \"./Pieces/Queen\";\r\nimport KingFactory from \"./Pieces/King\";\r\nimport deepCopy from \"./core/deepCopy\";\r\n\r\nconst ChessFactory = () => {\r\n\r\n    const initializeBoard = () => {\r\n        return ([\r\n            [RookFactory('white'), PawnFactory('white'), null, null, null, null, PawnFactory('black'), RookFactory('black')],\r\n            [KnightFactory('white'), PawnFactory('white'), null, null, null, null, PawnFactory('black'), KnightFactory('black')],\r\n            [BishopFactory('white'), PawnFactory('white'), null, null, null, null, PawnFactory('black'), BishopFactory('black')],\r\n            [QueenFactory('white'), PawnFactory('white'), null, null, null, null, PawnFactory('black'), QueenFactory('black')],\r\n            [KingFactory('white'), PawnFactory('white'), null, null, null, null, PawnFactory('black'), KingFactory('black')],\r\n            [null, PawnFactory('white'), null, null, null, null, PawnFactory('black'), BishopFactory('black')],\r\n            [KnightFactory('white'), PawnFactory('white'), null, null, null, null, PawnFactory('black'), KnightFactory('black')],\r\n            [RookFactory('white'), PawnFactory('white'), null, null, null, null, PawnFactory('black'), RookFactory('black')],\r\n        ]);\r\n    };\r\n\r\n    //Generates list of moves given a board setup and the color of the current turn\r\n    //Checks if player is in check after move\r\n    const generateImmediateMoves = (board, turn) => {\r\n\r\n        let movesList = [];\r\n\r\n        for (let x = 0; x < 8; x = x + 1) {\r\n            for (let y = 0; y < 8; y = y + 1) {\r\n                if (board[x][y] !== null && board[x][y].color === turn) {\r\n                    let position = [x, y];\r\n                    movesList = movesList.concat(board[x][y].getMoves(board, position));\r\n                }\r\n            }\r\n        }\r\n\r\n        return movesList;\r\n    }\r\n\r\n    //Generates list of legal moves, given the current turn and board\r\n    //Legal move takes the form of [initialPosition, finalPosition]\r\n    const generateLegalMovesList = (board, turn, moveHistory) => {\r\n        let legalMovesList = generateImmediateMoves(board, turn);\r\n\r\n        let illegalMovesList = [];\r\n\r\n        //Loops through all moves and generates a new board for after each move\r\n        //Checks if player is in check \r\n        //If any of the opposing player's possible moves on the new board attack the player's king, move is illegal\r\n        //Adds illigal moves to illegalMovesList, then removes moves in illegalMovesList from movesList\r\n        for (let i = 0; i < legalMovesList.length; i = i + 1) {\r\n            let move = legalMovesList[i];\r\n            let resultingBoard = deepCopy(board);\r\n            let positionOfKingOnResultingBoard;\r\n            let nextTurn = (turn === 'white') ? 'black' : 'white';\r\n\r\n            //resultingBoard is the board after the current move being looped has been played\r\n            resultingBoard[move[1][0]][move[1][1]] = resultingBoard[move[0][0]][move[0][1]];\r\n            resultingBoard[move[0][0]][move[0][1]] = null;\r\n\r\n            //Gets location of current player's king on resultingBoard\r\n            for (let x = 0; x < 8; x = x + 1) {\r\n                for (let y = 0; y < 8; y = y + 1) {\r\n                    if (resultingBoard[x][y] !== null && resultingBoard[x][y].color === turn && resultingBoard[x][y].piece === 'King') {\r\n                        positionOfKingOnResultingBoard = [x, y];\r\n                    }\r\n                }\r\n            }\r\n\r\n            let inCheck = false;\r\n            \r\n            let nextTurnMovesList = generateImmediateMoves(resultingBoard, nextTurn);\r\n\r\n            nextTurnMovesList.forEach(move => {\r\n                if (JSON.stringify(move[1]) === JSON.stringify(positionOfKingOnResultingBoard)) inCheck = true;\r\n            });\r\n\r\n            if (inCheck) illegalMovesList.push(legalMovesList[i]);\r\n\r\n        };\r\n\r\n        //Adds castling moves\r\n        checkForCastle(board, turn, moveHistory).forEach(castleMove => {\r\n            legalMovesList.push(castleMove);\r\n        });\r\n\r\n        //Filters movesList to only include moves that are not in illegalMovesList\r\n        legalMovesList = legalMovesList.filter((move) => !illegalMovesList.includes(move));\r\n\r\n        return legalMovesList\r\n    }\r\n\r\n    const checkForCastle = (board, turn, moveHistory) => {\r\n\r\n        let legalCastlingMoves = [];\r\n\r\n        let ARookInitialPosition = turn === 'white' ? [0, 0] : [0, 7];\r\n        let HRookInitialPosition = turn === 'white' ? [7, 0] : [7, 7];\r\n        let kingInitialPosition = turn === 'white' ? [4, 0] : [4, 7];\r\n\r\n        //King castling long\r\n        if (castleMoveLegal(kingInitialPosition, ARookInitialPosition, board, turn, moveHistory)) {\r\n            legalCastlingMoves.push(\r\n                //2D move. First is king, second is rook\r\n                ['castle', [kingInitialPosition, [kingInitialPosition[0] - 2, kingInitialPosition[1]]], [ARookInitialPosition, [ARookInitialPosition[0] + 3, ARookInitialPosition[1]]]]\r\n            );\r\n        }\r\n\r\n        //King castling short\r\n        if (castleMoveLegal(kingInitialPosition, HRookInitialPosition, board, turn, moveHistory)) {\r\n            legalCastlingMoves.push(\r\n                //2D move. First is king, second is rook\r\n                ['castle', [kingInitialPosition, [kingInitialPosition[0] + 2, kingInitialPosition[1]]], [HRookInitialPosition, [HRookInitialPosition[0] - 2, ARookInitialPosition[1]]]]\r\n            );\r\n        }\r\n\r\n        return legalCastlingMoves;\r\n    }\r\n\r\n    //Checks if castling move is legal, given rook/king pair to castle\r\n    const castleMoveLegal = (kingInitialPosition, rookInitialPosition, board, turn, moveHistory) => {\r\n\r\n        let kingHasMoved = hasPieceMoved(kingInitialPosition, moveHistory);\r\n        let rookHasMoved = hasPieceMoved(rookInitialPosition, moveHistory);\r\n\r\n        if (!kingHasMoved && !rookHasMoved) {\r\n            let squaresKingGoesThrough = [];\r\n            //Are there pieces between king and rook?\r\n            let squaresBetweenOccupied = false;\r\n\r\n            //Loops through all squares between x value of king's initial position and rook's initial position\r\n            for (let x = kingInitialPosition[0] > rookInitialPosition[0] ? kingInitialPosition[0] - 1 : rookInitialPosition[0] - 1; x !== 4 && x !== 0; x = x - 1) {\r\n                //King moves two squares. If square is within 2 of king initial square, push to squaresKingGoesThrough\r\n                if (Math.abs(kingInitialPosition[0] - x) <= 2) squaresKingGoesThrough.push([x, kingInitialPosition[1]]);\r\n                //If square has a piece, the squares between are occupied\r\n                if (board[x][kingInitialPosition[1]] !== null) squaresBetweenOccupied = true;\r\n            }\r\n\r\n            //if no positions between them have a piece, check if any squares the king passes are in check\r\n            if (!squaresBetweenOccupied) {\r\n                console.log(squaresKingGoesThrough)\r\n                //Generates other player's moves\r\n                let otherTurnMoves = generateImmediateMoves(board, (turn === 'white') ? 'black' : 'white');\r\n                console.log(otherTurnMoves)\r\n                let anyKingSquaresInCheck = false;\r\n                otherTurnMoves.forEach(move => {\r\n                    squaresKingGoesThrough.forEach(squareKingGoesThrough => {\r\n                        if (JSON.stringify(move[1]) === JSON.stringify(squareKingGoesThrough)) anyKingSquaresInCheck = true;\r\n                    });\r\n                });\r\n\r\n                //Only returns true if 1) no pieces are between and 2) no squares the king goes through are in check\r\n                //Already checked for no pieces between, so returns value of statement \"no squares the king goes through are in check\"\r\n                return anyKingSquaresInCheck === false;\r\n            }\r\n        } else {\r\n            return false;\r\n        }\r\n\r\n        //Need logic to handle castling moves in legalMovesList\r\n        //Probably just if any move is a 2d array, both moves are made\r\n        //Since castling should really only be the only move with two moves\r\n        //Unless pawn promotion also has two moves? \r\n    }\r\n\r\n    //Checks if piece has moved, given initial position and history of moves\r\n    const hasPieceMoved = (initialPosition, moveHistory) => {\r\n        let hasMoved = false;\r\n\r\n        moveHistory.forEach(move => {\r\n            if (JSON.stringify(move[0]) === JSON.stringify(initialPosition)) hasMoved = true;\r\n        });\r\n\r\n        return hasMoved;\r\n    }\r\n\r\n    //Checks if move is in list of legal moves\r\n    //Returns string. String can be 'invalid', 'normal', 'castle', 'en passant'\r\n    const moveIsInMovesList = (position1, position2, movesList) => {\r\n\r\n        let moveInMovesList = 'invalid';\r\n\r\n        movesList.forEach(move => {\r\n            if (JSON.stringify(move) === JSON.stringify([position1, position2])) moveInMovesList = 'normal';\r\n            //Checks for castling or en passant, which are 2D arrays\r\n            //Type of move is stored at move[0]\r\n            \r\n            if (typeof move[0] === 'string' && JSON.stringify(move[1]) === JSON.stringify([position1, position2])) moveInMovesList = move[0];\r\n        });\r\n\r\n        return moveInMovesList;\r\n    }\r\n\r\n    //Makes move on board, adds move to history\r\n    const move = (moveType, position1, position2, board) => {\r\n        switch (moveType) {\r\n            case 'normal':\r\n                //Sets position2 equal to value of position1\r\n                board[position2[0]][position2[1]] = board[position1[0]][position1[1]];\r\n                //Clears position1\r\n                board[position1[0]][position1[1]] = null;\r\n                break;\r\n            case 'castle':\r\n                //Moves king\r\n                board[position2[0]][position2[1]] = board[position1[0]][position1[1]];\r\n                //Set original king position to null\r\n                board[position1[0]][position1[1]] = null;\r\n                //Move rooks based on side castling to (found based on position2[0], which gives column king moves to)\r\n                //Position2[1] will always give the row\r\n                //Castle long\r\n                if (position2[0] === 2) {\r\n                    //Moves rook\r\n                    board[3][position2[1]] = board[0][position2[1]];\r\n                    //Sets rook initial position to null\r\n                    board[0][position2[1]] = null;\r\n                }\r\n                //Castle short\r\n                else {\r\n                    //Moves rook\r\n                    board[5][position2[1]] = board[7][position2[1]];\r\n                    //Sets rook initial position to null\r\n                    board[7][position2[1]] = null;\r\n                }\r\n                break;\r\n            default: \r\n                break;\r\n        }\r\n    }\r\n\r\n    const endGame = (turn) => {\r\n        alert('End Game')\r\n    }\r\n\r\n    return Object.create({\r\n        board: initializeBoard(),\r\n        turn: 'white',\r\n        legalMovesList: generateImmediateMoves(initializeBoard(), 'white'),\r\n        moveHistory: [],\r\n\r\n        //I'll need to add functions for castling/converting pawn on end rank (should both of those go here?)\r\n        handleMove(position1, position2) {\r\n\r\n            let moveType = moveIsInMovesList(position1, position2, this.legalMovesList);\r\n            //If move is in list of legal moves\r\n            if (moveType !== 'invalid') {\r\n                //Makes move on board\r\n                move(moveType, position1, position2, this.board, this.moveHistory);\r\n\r\n                //Adds move to move history\r\n                this.moveHistory.push([position1, position2]);\r\n\r\n                //Changes turn\r\n                this.turn === 'white' ? this.turn = 'black' : this.turn = 'white';\r\n\r\n                //Re-generates movesList for new board and turn\r\n                this.legalMovesList = generateLegalMovesList(this.board, this.turn, this.moveHistory);\r\n\r\n                //if there are no legal moves, the turn at the beginning of the function wins\r\n                if (this.legalMovesList.length === 0) endGame();\r\n            }\r\n        },\r\n        printMoves() {\r\n            this.generateLegalMovesList(this.board, this.turn);\r\n            console.log(this.legalMovesList);\r\n        }\r\n    })\r\n\r\n}\r\n\r\nexport default ChessFactory;"]},"metadata":{},"sourceType":"module"}