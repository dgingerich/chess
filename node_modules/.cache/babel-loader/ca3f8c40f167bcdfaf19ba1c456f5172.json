{"ast":null,"code":"const RookFactory = color => {\n  //If direction is +1, generates moves up. If direction is -1, generates moves down\n  //Returns moves, which can be concatanated to a larger list of moves\n  const generateMovesVertically = direction => {\n    let moves = [];\n    let encounteredPiece = false;\n\n    for (let y = position[1] + direction; y < 8 && y >= 0 && !encounteredPiece; y = y + direction) {\n      //If the space is not empty\n      if (board[position[0]][y].piece !== null) {\n        encounteredPiece = true; //If the enocountered piece is not of the same color as this piece, add as a legal move\n\n        board[position[0]][y].piece.color !== this.color ? moves.push(position[0][y]) : '';\n      } //If the space is empty add as a legal move \n      else {\n        moves.push(position[0][y]);\n      }\n    }\n\n    return moves;\n  };\n\n  return Object.create({\n    color: color,\n    piece: 'Rook',\n\n    //Position a two value array starting from lower left quadrant\n    //White's bottom row is 0, black's bottom row is 7\n    getMoves(board, position) {\n      let moves = [];\n      moves = moves.concat(generateMovesVertically(1));\n    }\n\n  });\n};\n\n_c = RookFactory;\nexport default RookFactory;\n\nvar _c;\n\n$RefreshReg$(_c, \"RookFactory\");","map":{"version":3,"sources":["C:/Users/dging/Programming/chess/src/model/Pieces/Rook.js"],"names":["RookFactory","color","generateMovesVertically","direction","moves","encounteredPiece","y","position","board","piece","push","Object","create","getMoves","concat"],"mappings":"AACA,MAAMA,WAAW,GAAIC,KAAD,IAAW;AAE3B;AACA;AACA,QAAMC,uBAAuB,GAAIC,SAAD,IAAe;AAC3C,QAAIC,KAAK,GAAG,EAAZ;AACA,QAAIC,gBAAgB,GAAG,KAAvB;;AAEA,SAAK,IAAIC,CAAC,GAAGC,QAAQ,CAAC,CAAD,CAAR,GAAcJ,SAA3B,EAAsCG,CAAC,GAAG,CAAJ,IAASA,CAAC,IAAI,CAAd,IAAmB,CAACD,gBAA1D,EAA4EC,CAAC,GAAGA,CAAC,GAAGH,SAApF,EAA+F;AAC3F;AACA,UAAIK,KAAK,CAACD,QAAQ,CAAC,CAAD,CAAT,CAAL,CAAmBD,CAAnB,EAAsBG,KAAtB,KAAgC,IAApC,EAA0C;AACtCJ,QAAAA,gBAAgB,GAAG,IAAnB,CADsC,CAEtC;;AACAG,QAAAA,KAAK,CAACD,QAAQ,CAAC,CAAD,CAAT,CAAL,CAAmBD,CAAnB,EAAsBG,KAAtB,CAA4BR,KAA5B,KAAsC,KAAKA,KAA3C,GAAmDG,KAAK,CAACM,IAAN,CAAWH,QAAQ,CAAC,CAAD,CAAR,CAAYD,CAAZ,CAAX,CAAnD,GAAgF,EAAhF;AACH,OAJD,CAIE;AAJF,WAKK;AACDF,QAAAA,KAAK,CAACM,IAAN,CAAWH,QAAQ,CAAC,CAAD,CAAR,CAAYD,CAAZ,CAAX;AACH;AACJ;;AAED,WAAOF,KAAP;AACH,GAjBD;;AAmBA,SAAOO,MAAM,CAACC,MAAP,CAAc;AACjBX,IAAAA,KAAK,EAAEA,KADU;AAEjBQ,IAAAA,KAAK,EAAE,MAFU;;AAIjB;AACA;AACAI,IAAAA,QAAQ,CAACL,KAAD,EAAQD,QAAR,EAAkB;AACtB,UAAIH,KAAK,GAAG,EAAZ;AAEAA,MAAAA,KAAK,GAAGA,KAAK,CAACU,MAAN,CAAaZ,uBAAuB,CAAC,CAAD,CAApC,CAAR;AAEH;;AAXgB,GAAd,CAAP;AAaH,CApCD;;KAAMF,W;AAsCN,eAAeA,WAAf","sourcesContent":["\r\nconst RookFactory = (color) => {\r\n\r\n    //If direction is +1, generates moves up. If direction is -1, generates moves down\r\n    //Returns moves, which can be concatanated to a larger list of moves\r\n    const generateMovesVertically = (direction) => {\r\n        let moves = [];\r\n        let encounteredPiece = false;\r\n\r\n        for (let y = position[1] + direction; y < 8 && y >= 0 && !encounteredPiece; y = y + direction) {\r\n            //If the space is not empty\r\n            if (board[position[0]][y].piece !== null) {\r\n                encounteredPiece = true;\r\n                //If the enocountered piece is not of the same color as this piece, add as a legal move\r\n                board[position[0]][y].piece.color !== this.color ? moves.push(position[0][y]) : '';\r\n            } //If the space is empty add as a legal move \r\n            else {\r\n                moves.push(position[0][y]);\r\n            }\r\n        }\r\n        \r\n        return moves;\r\n    }\r\n\r\n    return Object.create({\r\n        color: color,\r\n        piece: 'Rook',\r\n\r\n        //Position a two value array starting from lower left quadrant\r\n        //White's bottom row is 0, black's bottom row is 7\r\n        getMoves(board, position) {\r\n            let moves = [];\r\n\r\n            moves = moves.concat(generateMovesVertically(1));\r\n\r\n        }\r\n    })\r\n}\r\n\r\nexport default RookFactory;"]},"metadata":{},"sourceType":"module"}