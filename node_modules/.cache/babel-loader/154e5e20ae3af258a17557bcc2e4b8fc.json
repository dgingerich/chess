{"ast":null,"code":"const KingFactory = color => {\n  //Generates moves in a certain direction in increments\n  const generateMoves = (board, position, color, xincrement, yincrement) => {\n    let moves = [];\n    let x = position[0] + xincrement;\n    let y = position[1] + yincrement;\n    let encounteredPiece = false; //If the space is not empty\n\n    if (board[x][y] !== null) {\n      encounteredPiece = true; //If the enocountered piece is not of the same color as this piece, add as a legal move\n\n      if (board[x][y].color !== color) {\n        moves.push([position, [x, y]]);\n      }\n    } //If the space is empty add as a legal move \n    else {\n      moves.push([position, [x, y]]);\n    }\n\n    return moves;\n  };\n\n  return Object.create({\n    color: color,\n    piece: 'King',\n\n    //Position a two value array starting from lower left quadrant\n    getMoves(board, position) {\n      let moves = []; //Moves right\n\n      moves = moves.concat(generateMoves(board, position, color, 1, 0)); //Moves left\n\n      moves = moves.concat(generateMoves(board, position, color, -1, 0)); //Moves up\n\n      moves = moves.concat(generateMoves(board, position, color, 0, 1)); //Moves down\n\n      moves = moves.concat(generateMoves(board, position, color, 0, -1)); //Moves up and right\n\n      moves = moves.concat(generateMoves(board, position, color, 1, 1)); //Moves up and left\n\n      moves = moves.concat(generateMoves(board, position, color, 1, -1)); //Moves down and right\n\n      moves = moves.concat(generateMoves(board, position, color, -1, 1)); //Moves down and left\n\n      moves = moves.concat(generateMoves(board, position, color, -1, -1));\n      return moves;\n    }\n\n  });\n};\n\n_c = KingFactory;\nexport default KingFactory;\n\nvar _c;\n\n$RefreshReg$(_c, \"KingFactory\");","map":{"version":3,"sources":["C:/Users/dging/Programming/chess/src/model/Pieces/King.js"],"names":["KingFactory","color","generateMoves","board","position","xincrement","yincrement","moves","x","y","encounteredPiece","push","Object","create","piece","getMoves","concat"],"mappings":"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","sourcesContent":["\r\nconst KingFactory = (color) => {\r\n\r\n    //Generates moves in a certain direction in increments\r\n    const generateMoves = (board, position, color, xincrement, yincrement) => {\r\n        let moves = [];\r\n        let x = position[0] + xincrement;\r\n        let y = position[1] + yincrement;\r\n        let encounteredPiece = false;\r\n\r\n        //If the space is not empty\r\n        if (board[x][y] !== null) {\r\n            encounteredPiece = true;\r\n            //If the enocountered piece is not of the same color as this piece, add as a legal move\r\n            if (board[x][y].color !== color) {\r\n                moves.push([position, [x, y]]);\r\n            }\r\n        } //If the space is empty add as a legal move \r\n        else {\r\n            moves.push([position, [x, y]]);\r\n        }\r\n\r\n        return moves;\r\n    }\r\n\r\n    return Object.create({\r\n        color: color,\r\n        piece: 'King',\r\n\r\n        //Position a two value array starting from lower left quadrant\r\n        getMoves(board, position) {\r\n            let moves = [];\r\n            //Moves right\r\n            moves = moves.concat(generateMoves(board, position, color, 1, 0));\r\n            //Moves left\r\n            moves = moves.concat(generateMoves(board, position, color, -1, 0));\r\n            //Moves up\r\n            moves = moves.concat(generateMoves(board, position, color, 0, 1));\r\n            //Moves down\r\n            moves = moves.concat(generateMoves(board, position, color, 0, -1));\r\n            //Moves up and right\r\n            moves = moves.concat(generateMoves(board, position, color, 1, 1));\r\n            //Moves up and left\r\n            moves = moves.concat(generateMoves(board, position, color, 1, -1));\r\n            //Moves down and right\r\n            moves = moves.concat(generateMoves(board, position, color, -1, 1));\r\n            //Moves down and left\r\n            moves = moves.concat(generateMoves(board, position, color, -1, -1));\r\n            return moves;\r\n        }\r\n    })\r\n}\r\n\r\nexport default KingFactory;"]},"metadata":{},"sourceType":"module"}