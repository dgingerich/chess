{"ast":null,"code":"//2D arrays need to be deep copied so that the copied second dimension+ is copied to a new reference\n//This function uses recursion to deep copy a >1D array by calling this function on all further dimensions\n//Also calls deepCopyObject function to handle deep copying objects\nconst deepCopy = array => {\n  let copy = [];\n  array.forEach(element => {\n    if (Array.isArray(element)) {\n      copy.push(deepCopy(element));\n    } else if (element !== null && typeof element === 'object') {\n      copy.push(deepCopyObject(element));\n    } else {\n      copy.push(element);\n    }\n  });\n  return copy;\n};\n\nconst deepCopyObject = obj => {\n  let objectCopy = {};\n\n  for (const [key, value] of Object.entries(obj)) {\n    if (Array.isArray(value)) {\n      objectCopy[key] = deepCopy(value);\n    } else if (typeof value === 'object') {\n      objectCopy[key] = deepCopyObject(value);\n    } else {\n      objectCopy[key] = value;\n    }\n  }\n\n  return objectCopy;\n};\n\nexport default deepCopy;","map":{"version":3,"sources":["C:/Users/dging/Programming/chess/src/model/core/deepCopy.js"],"names":["deepCopy","array","copy","forEach","element","Array","isArray","push","deepCopyObject","obj","objectCopy","key","value","Object","entries"],"mappings":"AACA;AACA;AACA;AACA,MAAMA,QAAQ,GAAIC,KAAD,IAAW;AACxB,MAAIC,IAAI,GAAG,EAAX;AAEAD,EAAAA,KAAK,CAACE,OAAN,CAAcC,OAAO,IAAI;AACrB,QAAIC,KAAK,CAACC,OAAN,CAAcF,OAAd,CAAJ,EAA4B;AACxBF,MAAAA,IAAI,CAACK,IAAL,CAAUP,QAAQ,CAACI,OAAD,CAAlB;AACH,KAFD,MAEO,IAAIA,OAAO,KAAK,IAAZ,IAAoB,OAAOA,OAAP,KAAmB,QAA3C,EAAqD;AACxDF,MAAAA,IAAI,CAACK,IAAL,CAAUC,cAAc,CAACJ,OAAD,CAAxB;AACH,KAFM,MAEA;AACHF,MAAAA,IAAI,CAACK,IAAL,CAAUH,OAAV;AACH;AACJ,GARD;AAUA,SAAOF,IAAP;AACH,CAdD;;AAgBA,MAAMM,cAAc,GAAIC,GAAD,IAAS;AAC5B,MAAIC,UAAU,GAAG,EAAjB;;AAEA,OAAK,MAAM,CAACC,GAAD,EAAMC,KAAN,CAAX,IAA2BC,MAAM,CAACC,OAAP,CAAeL,GAAf,CAA3B,EAAgD;AAC5C,QAAIJ,KAAK,CAACC,OAAN,CAAcM,KAAd,CAAJ,EAA0B;AACtBF,MAAAA,UAAU,CAACC,GAAD,CAAV,GAAkBX,QAAQ,CAACY,KAAD,CAA1B;AACH,KAFD,MAEO,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAClCF,MAAAA,UAAU,CAACC,GAAD,CAAV,GAAkBH,cAAc,CAACI,KAAD,CAAhC;AACH,KAFM,MAEA;AACHF,MAAAA,UAAU,CAACC,GAAD,CAAV,GAAkBC,KAAlB;AACH;AACJ;;AACD,SAAOF,UAAP;AACH,CAbD;;AAeA,eAAeV,QAAf","sourcesContent":["\r\n//2D arrays need to be deep copied so that the copied second dimension+ is copied to a new reference\r\n//This function uses recursion to deep copy a >1D array by calling this function on all further dimensions\r\n//Also calls deepCopyObject function to handle deep copying objects\r\nconst deepCopy = (array) => {\r\n    let copy = [];\r\n\r\n    array.forEach(element => {\r\n        if (Array.isArray(element)) {\r\n            copy.push(deepCopy(element));\r\n        } else if (element !== null && typeof element === 'object') {\r\n            copy.push(deepCopyObject(element));\r\n        } else {\r\n            copy.push(element);\r\n        }\r\n    });\r\n\r\n    return copy;\r\n}\r\n\r\nconst deepCopyObject = (obj) => {\r\n    let objectCopy = {};\r\n\r\n    for (const [key, value] of Object.entries(obj)) {\r\n        if (Array.isArray(value)) {\r\n            objectCopy[key] = deepCopy(value);\r\n        } else if (typeof value === 'object') {\r\n            objectCopy[key] = deepCopyObject(value);\r\n        } else {\r\n            objectCopy[key] = value;\r\n        }\r\n    }\r\n    return objectCopy;\r\n}\r\n\r\nexport default deepCopy;"]},"metadata":{},"sourceType":"module"}