{"ast":null,"code":"const BishopFactory = color => {\n  //Generates moves in a certain direction in increments\n  const generateIncrementalMoves = (board, position, color, xincrement, yincrement) => {\n    let moves = [];\n    let encounteredPiece = false;\n\n    for (let x = position[0] + xincrement; x >= 0 && x < 8 && !encounteredPiece; x = x + xincrement) for (let y = position[1] + yincrement; y < 8 && y >= 0 && !encounteredPiece; y = y + yincrement) {\n      //If the space is not empty\n      if (board[x][y] !== null) {\n        encounteredPiece = true; //If the enocountered piece is not of the same color as this piece, add as a legal move\n\n        if (board[x][y].color !== color) {\n          moves.push([position, [x, y]]);\n        }\n      } //If the space is empty add as a legal move \n      else {\n        moves.push([position, [x, y]]);\n      }\n    }\n\n    return moves;\n  };\n\n  return Object.create({\n    color: color,\n    piece: 'Bishop',\n\n    //Position a two value array starting from lower left quadrant\n    getMoves(board, position) {\n      let moves = []; //Moves up and right\n\n      moves = moves.concat(generateIncrementalMoves(board, position, color, 1, 1)); //Moves up and left\n\n      moves = moves.concat(generateIncrementalMoves(board, position, color, 1, -1)); //Moves down and right\n\n      moves = moves.concat(generateIncrementalMoves(board, position, color, -1, 1)); //Moves down and left\n\n      moves = moves.concat(generateIncrementalMoves(board, position, color, -1, -1));\n      return moves;\n    }\n\n  });\n};\n\n_c = BishopFactory;\nexport default BishopFactory;\n\nvar _c;\n\n$RefreshReg$(_c, \"BishopFactory\");","map":{"version":3,"sources":["C:/Users/dging/Programming/chess/src/model/Pieces/Bishop.js"],"names":["BishopFactory","color","generateIncrementalMoves","board","position","xincrement","yincrement","moves","encounteredPiece","x","y","push","Object","create","piece","getMoves","concat"],"mappings":"AACA,MAAMA,aAAa,GAAIC,KAAD,IAAW;AAE7B;AACA,QAAMC,wBAAwB,GAAG,CAACC,KAAD,EAAQC,QAAR,EAAkBH,KAAlB,EAAyBI,UAAzB,EAAqCC,UAArC,KAAoD;AACjF,QAAIC,KAAK,GAAG,EAAZ;AACA,QAAIC,gBAAgB,GAAG,KAAvB;;AAEA,SAAK,IAAIC,CAAC,GAAGL,QAAQ,CAAC,CAAD,CAAR,GAAcC,UAA3B,EAAuCI,CAAC,IAAI,CAAL,IAAUA,CAAC,GAAG,CAAd,IAAmB,CAACD,gBAA3D,EAA6EC,CAAC,GAAGA,CAAC,GAAGJ,UAArF,EACI,KAAK,IAAIK,CAAC,GAAGN,QAAQ,CAAC,CAAD,CAAR,GAAcE,UAA3B,EAAuCI,CAAC,GAAG,CAAJ,IAASA,CAAC,IAAI,CAAd,IAAmB,CAACF,gBAA3D,EAA6EE,CAAC,GAAGA,CAAC,GAAGJ,UAArF,EAAiG;AAC7F;AACA,UAAIH,KAAK,CAACM,CAAD,CAAL,CAASC,CAAT,MAAgB,IAApB,EAA0B;AACtBF,QAAAA,gBAAgB,GAAG,IAAnB,CADsB,CAEtB;;AACA,YAAIL,KAAK,CAACM,CAAD,CAAL,CAASC,CAAT,EAAYT,KAAZ,KAAsBA,KAA1B,EAAiC;AAC7BM,UAAAA,KAAK,CAACI,IAAN,CAAW,CAACP,QAAD,EAAW,CAACK,CAAD,EAAIC,CAAJ,CAAX,CAAX;AACH;AACJ,OAND,CAME;AANF,WAOK;AACDH,QAAAA,KAAK,CAACI,IAAN,CAAW,CAACP,QAAD,EAAW,CAACK,CAAD,EAAIC,CAAJ,CAAX,CAAX;AACH;AACJ;;AAEL,WAAOH,KAAP;AACH,GApBD;;AAsBA,SAAOK,MAAM,CAACC,MAAP,CAAc;AACjBZ,IAAAA,KAAK,EAAEA,KADU;AAEjBa,IAAAA,KAAK,EAAE,QAFU;;AAIjB;AACAC,IAAAA,QAAQ,CAACZ,KAAD,EAAQC,QAAR,EAAkB;AACtB,UAAIG,KAAK,GAAG,EAAZ,CADsB,CAGtB;;AACAA,MAAAA,KAAK,GAAGA,KAAK,CAACS,MAAN,CAAad,wBAAwB,CAACC,KAAD,EAAQC,QAAR,EAAkBH,KAAlB,EAAyB,CAAzB,EAA4B,CAA5B,CAArC,CAAR,CAJsB,CAKtB;;AACAM,MAAAA,KAAK,GAAGA,KAAK,CAACS,MAAN,CAAad,wBAAwB,CAACC,KAAD,EAAQC,QAAR,EAAkBH,KAAlB,EAAyB,CAAzB,EAA4B,CAAC,CAA7B,CAArC,CAAR,CANsB,CAOtB;;AACAM,MAAAA,KAAK,GAAGA,KAAK,CAACS,MAAN,CAAad,wBAAwB,CAACC,KAAD,EAAQC,QAAR,EAAkBH,KAAlB,EAAyB,CAAC,CAA1B,EAA6B,CAA7B,CAArC,CAAR,CARsB,CAStB;;AACAM,MAAAA,KAAK,GAAGA,KAAK,CAACS,MAAN,CAAad,wBAAwB,CAACC,KAAD,EAAQC,QAAR,EAAkBH,KAAlB,EAAyB,CAAC,CAA1B,EAA6B,CAAC,CAA9B,CAArC,CAAR;AAEA,aAAOM,KAAP;AACH;;AAlBgB,GAAd,CAAP;AAoBH,CA7CD;;KAAMP,a;AA+CN,eAAeA,aAAf","sourcesContent":["\r\nconst BishopFactory = (color) => {\r\n\r\n    //Generates moves in a certain direction in increments\r\n    const generateIncrementalMoves = (board, position, color, xincrement, yincrement) => {\r\n        let moves = [];\r\n        let encounteredPiece = false;\r\n\r\n        for (let x = position[0] + xincrement; x >= 0 && x < 8 && !encounteredPiece; x = x + xincrement)\r\n            for (let y = position[1] + yincrement; y < 8 && y >= 0 && !encounteredPiece; y = y + yincrement) {\r\n                //If the space is not empty\r\n                if (board[x][y] !== null) {\r\n                    encounteredPiece = true;\r\n                    //If the enocountered piece is not of the same color as this piece, add as a legal move\r\n                    if (board[x][y].color !== color) {\r\n                        moves.push([position, [x, y]]);\r\n                    }\r\n                } //If the space is empty add as a legal move \r\n                else {\r\n                    moves.push([position, [x, y]]);\r\n                }\r\n            }\r\n\r\n        return moves;\r\n    }\r\n\r\n    return Object.create({\r\n        color: color,\r\n        piece: 'Bishop',\r\n\r\n        //Position a two value array starting from lower left quadrant\r\n        getMoves(board, position) {\r\n            let moves = [];\r\n\r\n            //Moves up and right\r\n            moves = moves.concat(generateIncrementalMoves(board, position, color, 1, 1));\r\n            //Moves up and left\r\n            moves = moves.concat(generateIncrementalMoves(board, position, color, 1, -1));\r\n            //Moves down and right\r\n            moves = moves.concat(generateIncrementalMoves(board, position, color, -1, 1));\r\n            //Moves down and left\r\n            moves = moves.concat(generateIncrementalMoves(board, position, color, -1, -1));\r\n\r\n            return moves;\r\n        }\r\n    })\r\n}\r\n\r\nexport default BishopFactory;"]},"metadata":{},"sourceType":"module"}