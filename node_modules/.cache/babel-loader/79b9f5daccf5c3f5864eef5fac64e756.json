{"ast":null,"code":"import PawnFactory from \"./Pieces/Pawn\";\nimport RookFactory from \"./Pieces/Rook\";\nimport KnightFactory from \"./Pieces/Knight\";\nimport BishopFactory from \"./Pieces/Bishop\";\nimport QueenFactory from \"./Pieces/Queen\";\nimport KingFactory from \"./Pieces/King\";\n\nconst ChessFactory = () => {\n  const initializeBoard = () => {\n    return [[RookFactory('white'), PawnFactory('white'), null, null, null, null, PawnFactory('black'), RookFactory('black')], [KnightFactory('white'), PawnFactory('white'), null, null, null, null, PawnFactory('black'), KnightFactory('black')], [BishopFactory('white'), PawnFactory('white'), null, null, null, null, PawnFactory('black'), BishopFactory('black')], [QueenFactory('white'), PawnFactory('white'), null, null, null, null, PawnFactory('black'), QueenFactory('black')], [KingFactory('white'), PawnFactory('white'), null, null, null, null, PawnFactory('black'), KingFactory('black')], [BishopFactory('white'), PawnFactory('white'), null, null, null, null, PawnFactory('black'), BishopFactory('black')], [KnightFactory('white'), PawnFactory('white'), null, null, null, null, PawnFactory('black'), KnightFactory('black')], [RookFactory('white'), PawnFactory('white'), null, null, null, null, PawnFactory('black'), RookFactory('black')]];\n  }; //Generates list of moves given a board setup and the color of the current turn\n  //Checks if player is in check after move\n\n\n  const generateImmediateMoves = (board, turn) => {\n    let movesList = [];\n\n    for (let x = 0; x < 8; x = x + 1) {\n      for (let y = 0; y < 8; y = y + 1) {\n        if (board[x][y] !== null && board[x][y].color === turn) {\n          let position = [x, y];\n          movesList = movesList.concat(board[x][y].getMoves(board, position));\n        }\n      }\n    }\n\n    return movesList;\n  }; //2D arrays need to be deep copied so that the copied second dimension+ is copied to a new reference\n  //This function uses recursion to deep copy a >1D array by calling this function on all further dimensions\n  //Also calls deepCopyObject function to handle deep copying objects\n\n\n  const deepCopy = array => {\n    let copy = [];\n    array.forEach(element => {\n      if (Array.isArray(element)) {\n        copy.push(deepCopy(element));\n      } else if (element !== null && typeof element === 'object') {\n        copy.push(deepCopyObject(element));\n      } else {\n        copy.push(element);\n      }\n    });\n    return copy;\n  };\n\n  const deepCopyObject = obj => {\n    let objectCopy = {};\n\n    for (const [key, value] of Object.entries(obj)) {\n      if (Array.isArray(value)) {\n        objectCopy[key] = deepCopy(value);\n      } else if (typeof value === 'object') {\n        objectCopy[key] = deepCopyObject(value);\n      } else {\n        objectCopy[key] = value;\n      }\n    }\n\n    return objectCopy;\n  };\n\n  const generateMovesList = (board, turn) => {\n    let movesList = generateImmediateMoves(board, turn);\n    let illegalMovesList = []; //Loops through all moves and generates a new board for after each move\n    //Checks if player is in check \n    //If any of the opposing player's possible moves on the new board attack the player's king, move is illegal\n    //Adds illigal moves to illegalMovesList, then removes moves in illegalMovesList from movesList\n\n    for (let i = 0; i < movesList.length; i = i + 1) {\n      let move = movesList[i];\n      let resultingBoard = deepCopy(board);\n      let positionOfKingOnResultingBoard;\n      let nextTurn = turn === 'white' ? 'black' : 'white'; //resultingBoard is the board after the current move being looped has been played\n\n      resultingBoard[move[1][0]][move[1][1]] = resultingBoard[move[0][0]][move[0][1]];\n      resultingBoard[move[0][0]][move[0][1]] = null; //Gets location of current player's king on resultingBoard\n\n      for (let x = 0; x < 8; x = x + 1) {\n        for (let y = 0; y < 8; y = y + 1) {\n          if (resultingBoard[x][y] !== null && resultingBoard[x][y].color === turn && resultingBoard[x][y].piece === 'King') {\n            positionOfKingOnResultingBoard = [x, y];\n          }\n        }\n      }\n\n      let inCheck = false; //console.log(movesList[i])\n      //console.log(resultingBoard)\n\n      let nextTurnMovesList = generateImmediateMoves(resultingBoard, nextTurn); //console.log(nextTurnMovesList)\n\n      nextTurnMovesList.forEach(move => {\n        if (JSON.stringify(move[1]) === JSON.stringify(positionOfKingOnResultingBoard)) inCheck = true;\n      });\n\n      if (inCheck) {\n        illegalMovesList.push(movesList[i]);\n      }\n    }\n\n    ; //console.log('Illegal moves: ')\n    //console.log(illegalMoves)\n    //Filters movesList to only include moves that are not in illegalMovesList\n\n    movesList = movesList.filter(move => !illegalMovesList.includes(move));\n    return movesList;\n  };\n\n  const checkIfMoveInMovesList = (position1, position2, movesList) => {\n    let moveInMovesList = false;\n    movesList.forEach(move => {\n      if (JSON.stringify(move) === JSON.stringify([position1, position2])) moveInMovesList = true;\n    }); //if move isn't in movesList\n\n    return moveInMovesList;\n  };\n\n  const move = (position1, position2, board, turn, movesList, moveHistory) => {\n    console.log('here'); //Sets position2 equal to value of position1\n\n    board[position2[0]][position2[1]] = board[position1[0]][position1[1]]; //Clears position1\n\n    board[position1[0]][position1[1]] = null; //Adds move to move history\n\n    moveHistory.push([position1, position2]); //Changes turn\n\n    if (turn === 'white') {\n      turn = 'black';\n    } else {\n      turn = 'white';\n    } //Re-generates movesList for new board and turn\n\n\n    movesList = generateMovesList(board, turn);\n    console.log(turn); //if movesList.length === 0 current turn wins\n\n    if (movesList.length === 0) endGame();\n  };\n\n  const endGame = turn => {\n    alert('End Game');\n  };\n\n  return Object.create({\n    board: initializeBoard(),\n    turn: 'white',\n    movesList: generateImmediateMoves(initializeBoard(), 'white'),\n    moveHistory: [],\n\n    //generateMovesList isn't limited to current board and turn, in case a \n    generateMovesList(board, turn) {\n      let movesList = generateImmediateMoves(board, turn);\n      let illegalMovesList = []; //Loops through all moves and generates a new board for after each move\n      //Checks if player is in check \n      //If any of the opposing player's possible moves on the new board attack the player's king, move is illegal\n      //Adds illigal moves to illegalMovesList, then removes moves in illegalMovesList from movesList\n\n      for (let i = 0; i < movesList.length; i = i + 1) {\n        let move = movesList[i];\n        let resultingBoard = deepCopy(board);\n        let positionOfKingOnResultingBoard;\n        let nextTurn = turn === 'white' ? 'black' : 'white'; //resultingBoard is the board after the current move being looped has been played\n\n        resultingBoard[move[1][0]][move[1][1]] = resultingBoard[move[0][0]][move[0][1]];\n        resultingBoard[move[0][0]][move[0][1]] = null; //Gets location of current player's king on resultingBoard\n\n        for (let x = 0; x < 8; x = x + 1) {\n          for (let y = 0; y < 8; y = y + 1) {\n            if (resultingBoard[x][y] !== null && resultingBoard[x][y].color === turn && resultingBoard[x][y].piece === 'King') {\n              positionOfKingOnResultingBoard = [x, y];\n            }\n          }\n        }\n\n        let inCheck = false; //console.log(movesList[i])\n        //console.log(resultingBoard)\n\n        let nextTurnMovesList = generateImmediateMoves(resultingBoard, nextTurn); //console.log(nextTurnMovesList)\n\n        nextTurnMovesList.forEach(move => {\n          if (JSON.stringify(move[1]) === JSON.stringify(positionOfKingOnResultingBoard)) inCheck = true;\n        });\n\n        if (inCheck) {\n          illegalMovesList.push(movesList[i]);\n        }\n      }\n\n      ; //console.log('Illegal moves: ')\n      //console.log(illegalMoves)\n      //Filters movesList to only include moves that are not in illegalMovesList\n\n      movesList = movesList.filter(move => !illegalMovesList.includes(move));\n      return movesList;\n    },\n\n    //Move based on two positions\n    //I'll need to add functions for castling/converting pawn on end rank (should both of those go here?)\n    checkMove(position1, position2) {\n      //Check if move is in movesList\n      let moveInMovesList = checkIfMoveInMovesList(position1, position2, this.movesList); //Logic if move is legal\n\n      if (moveInMovesList) move(position1, position2, this.board, this.turn, this.movesList, this.moveHistory);\n    },\n\n    printMoves() {\n      this.generateLegalMovesList(this.board, this.turn);\n      console.log(this.movesList);\n    }\n\n  });\n};\n\n_c = ChessFactory;\nexport default ChessFactory;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChessFactory\");","map":{"version":3,"sources":["C:/Users/dging/Programming/chess/src/model/Chess.js"],"names":["PawnFactory","RookFactory","KnightFactory","BishopFactory","QueenFactory","KingFactory","ChessFactory","initializeBoard","generateImmediateMoves","board","turn","movesList","x","y","color","position","concat","getMoves","deepCopy","array","copy","forEach","element","Array","isArray","push","deepCopyObject","obj","objectCopy","key","value","Object","entries","generateMovesList","illegalMovesList","i","length","move","resultingBoard","positionOfKingOnResultingBoard","nextTurn","piece","inCheck","nextTurnMovesList","JSON","stringify","filter","includes","checkIfMoveInMovesList","position1","position2","moveInMovesList","moveHistory","console","log","endGame","alert","create","checkMove","printMoves","generateLegalMovesList"],"mappings":"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","sourcesContent":["import PawnFactory from \"./Pieces/Pawn\";\r\nimport RookFactory from \"./Pieces/Rook\";\r\nimport KnightFactory from \"./Pieces/Knight\";\r\nimport BishopFactory from \"./Pieces/Bishop\";\r\nimport QueenFactory from \"./Pieces/Queen\";\r\nimport KingFactory from \"./Pieces/King\";\r\n\r\nconst ChessFactory = () => {\r\n\r\n    const initializeBoard = () => {\r\n        return ([\r\n            [RookFactory('white'), PawnFactory('white'), null, null, null, null, PawnFactory('black'), RookFactory('black')],\r\n            [KnightFactory('white'), PawnFactory('white'), null, null, null, null, PawnFactory('black'), KnightFactory('black')],\r\n            [BishopFactory('white'), PawnFactory('white'), null, null, null, null, PawnFactory('black'), BishopFactory('black')],\r\n            [QueenFactory('white'), PawnFactory('white'), null, null, null, null, PawnFactory('black'), QueenFactory('black')],\r\n            [KingFactory('white'), PawnFactory('white'), null, null, null, null, PawnFactory('black'), KingFactory('black')],\r\n            [BishopFactory('white'), PawnFactory('white'), null, null, null, null, PawnFactory('black'), BishopFactory('black')],\r\n            [KnightFactory('white'), PawnFactory('white'), null, null, null, null, PawnFactory('black'), KnightFactory('black')],\r\n            [RookFactory('white'), PawnFactory('white'), null, null, null, null, PawnFactory('black'), RookFactory('black')],\r\n        ]);\r\n    };\r\n\r\n    //Generates list of moves given a board setup and the color of the current turn\r\n    //Checks if player is in check after move\r\n    const generateImmediateMoves = (board, turn) => {\r\n\r\n        let movesList = [];\r\n\r\n        for (let x = 0; x < 8; x = x + 1) {\r\n            for (let y = 0; y < 8; y = y + 1) {\r\n                if (board[x][y] !== null && board[x][y].color === turn) {\r\n                    let position = [x, y];\r\n                    movesList = movesList.concat(board[x][y].getMoves(board, position));\r\n                }\r\n            }\r\n        }\r\n\r\n        return movesList;\r\n    }\r\n\r\n    //2D arrays need to be deep copied so that the copied second dimension+ is copied to a new reference\r\n    //This function uses recursion to deep copy a >1D array by calling this function on all further dimensions\r\n    //Also calls deepCopyObject function to handle deep copying objects\r\n    const deepCopy = (array) => {\r\n        let copy = [];\r\n\r\n        array.forEach(element => {\r\n            if (Array.isArray(element)) {\r\n                copy.push(deepCopy(element));\r\n            } else if (element !== null && typeof element === 'object') {\r\n                copy.push(deepCopyObject(element));\r\n            } else {\r\n                copy.push(element);\r\n            }\r\n        });\r\n\r\n        return copy;\r\n    }\r\n\r\n    const deepCopyObject = (obj) => {\r\n        let objectCopy = {};\r\n\r\n        for (const [key, value] of Object.entries(obj)) {\r\n            if (Array.isArray(value)) {\r\n                objectCopy[key] = deepCopy(value);\r\n            } else if (typeof value === 'object') {\r\n                objectCopy[key] = deepCopyObject(value);\r\n            } else {\r\n                objectCopy[key] = value;\r\n            }\r\n        }\r\n        return objectCopy;\r\n    }\r\n\r\n   const generateMovesList = (board, turn) => {\r\n        let movesList = generateImmediateMoves(board, turn);\r\n\r\n        let illegalMovesList = [];\r\n\r\n        //Loops through all moves and generates a new board for after each move\r\n        //Checks if player is in check \r\n        //If any of the opposing player's possible moves on the new board attack the player's king, move is illegal\r\n        //Adds illigal moves to illegalMovesList, then removes moves in illegalMovesList from movesList\r\n        for (let i = 0; i < movesList.length; i = i + 1) {\r\n            let move = movesList[i];\r\n            let resultingBoard = deepCopy(board);\r\n            let positionOfKingOnResultingBoard;\r\n            let nextTurn = (turn === 'white') ? 'black' : 'white';\r\n\r\n            //resultingBoard is the board after the current move being looped has been played\r\n            resultingBoard[move[1][0]][move[1][1]] = resultingBoard[move[0][0]][move[0][1]];\r\n            resultingBoard[move[0][0]][move[0][1]] = null;\r\n\r\n            //Gets location of current player's king on resultingBoard\r\n            for (let x = 0; x < 8; x = x + 1) {\r\n                for (let y = 0; y < 8; y = y + 1) {\r\n                    if (resultingBoard[x][y] !== null && resultingBoard[x][y].color === turn && resultingBoard[x][y].piece === 'King') {\r\n                        positionOfKingOnResultingBoard = [x, y];\r\n                    }\r\n                }\r\n            }\r\n\r\n            let inCheck = false;\r\n            //console.log(movesList[i])\r\n            //console.log(resultingBoard)\r\n            let nextTurnMovesList = generateImmediateMoves(resultingBoard, nextTurn);\r\n            //console.log(nextTurnMovesList)\r\n\r\n            nextTurnMovesList.forEach(move => {\r\n                if (JSON.stringify(move[1]) === JSON.stringify(positionOfKingOnResultingBoard)) inCheck = true;\r\n            });\r\n\r\n            if (inCheck) {\r\n                illegalMovesList.push(movesList[i])\r\n            }\r\n\r\n        };\r\n        //console.log('Illegal moves: ')\r\n        //console.log(illegalMoves)\r\n\r\n        //Filters movesList to only include moves that are not in illegalMovesList\r\n        movesList = movesList.filter((move) => !illegalMovesList.includes(move));\r\n\r\n        return movesList\r\n    }\r\n\r\n    const checkIfMoveInMovesList = (position1, position2, movesList) => {\r\n        \r\n        let moveInMovesList = false;\r\n\r\n        movesList.forEach(move => {\r\n            if (JSON.stringify(move) === JSON.stringify([position1, position2])) moveInMovesList = true;\r\n        });\r\n        //if move isn't in movesList\r\n        return moveInMovesList;\r\n    }\r\n\r\n    const move = (position1, position2, board, turn, movesList, moveHistory) => {\r\n        console.log('here')\r\n        //Sets position2 equal to value of position1\r\n        board[position2[0]][position2[1]] = board[position1[0]][position1[1]];\r\n        //Clears position1\r\n        board[position1[0]][position1[1]] = null;\r\n        //Adds move to move history\r\n        moveHistory.push([position1, position2]);\r\n\r\n        //Changes turn\r\n        if (turn === 'white') {\r\n            turn = 'black';\r\n        } else {\r\n            turn = 'white';\r\n        }\r\n\r\n        //Re-generates movesList for new board and turn\r\n        movesList = generateMovesList(board, turn);\r\n\r\n        console.log(turn)\r\n\r\n        //if movesList.length === 0 current turn wins\r\n        if (movesList.length === 0) endGame();\r\n    }\r\n\r\n    const endGame = (turn) => {\r\n        alert('End Game')\r\n    }\r\n\r\n    return Object.create({\r\n        board: initializeBoard(),\r\n        turn: 'white',\r\n        movesList: generateImmediateMoves(initializeBoard(), 'white'),\r\n        moveHistory: [],\r\n\r\n        //generateMovesList isn't limited to current board and turn, in case a \r\n        generateMovesList(board, turn) {\r\n            let movesList = generateImmediateMoves(board, turn);\r\n\r\n            let illegalMovesList = [];\r\n\r\n            //Loops through all moves and generates a new board for after each move\r\n            //Checks if player is in check \r\n            //If any of the opposing player's possible moves on the new board attack the player's king, move is illegal\r\n            //Adds illigal moves to illegalMovesList, then removes moves in illegalMovesList from movesList\r\n            for (let i = 0; i < movesList.length; i = i + 1) {\r\n                let move = movesList[i];\r\n                let resultingBoard = deepCopy(board);\r\n                let positionOfKingOnResultingBoard;\r\n                let nextTurn = (turn === 'white') ? 'black' : 'white';\r\n\r\n                //resultingBoard is the board after the current move being looped has been played\r\n                resultingBoard[move[1][0]][move[1][1]] = resultingBoard[move[0][0]][move[0][1]];\r\n                resultingBoard[move[0][0]][move[0][1]] = null;\r\n\r\n                //Gets location of current player's king on resultingBoard\r\n                for (let x = 0; x < 8; x = x + 1) {\r\n                    for (let y = 0; y < 8; y = y + 1) {\r\n                        if (resultingBoard[x][y] !== null && resultingBoard[x][y].color === turn && resultingBoard[x][y].piece === 'King') {\r\n                            positionOfKingOnResultingBoard = [x, y];\r\n                        }\r\n                    }\r\n                }\r\n\r\n                let inCheck = false;\r\n                //console.log(movesList[i])\r\n                //console.log(resultingBoard)\r\n                let nextTurnMovesList = generateImmediateMoves(resultingBoard, nextTurn);\r\n                //console.log(nextTurnMovesList)\r\n\r\n                nextTurnMovesList.forEach(move => {\r\n                    if (JSON.stringify(move[1]) === JSON.stringify(positionOfKingOnResultingBoard)) inCheck = true;\r\n                });\r\n\r\n                if (inCheck) {\r\n                    illegalMovesList.push(movesList[i])\r\n                }\r\n\r\n            };\r\n            //console.log('Illegal moves: ')\r\n            //console.log(illegalMoves)\r\n\r\n            //Filters movesList to only include moves that are not in illegalMovesList\r\n            movesList = movesList.filter((move) => !illegalMovesList.includes(move));\r\n\r\n            return movesList\r\n        },\r\n\r\n        //Move based on two positions\r\n        //I'll need to add functions for castling/converting pawn on end rank (should both of those go here?)\r\n        checkMove(position1, position2) {\r\n\r\n            //Check if move is in movesList\r\n            let moveInMovesList = checkIfMoveInMovesList(position1, position2, this.movesList);\r\n\r\n            //Logic if move is legal\r\n            if (moveInMovesList) move(position1, position2, this.board, this.turn, this.movesList, this.moveHistory);\r\n\r\n        },\r\n        printMoves() {\r\n            this.generateLegalMovesList(this.board, this.turn);\r\n            console.log(this.movesList);\r\n        }\r\n    })\r\n\r\n}\r\n\r\nexport default ChessFactory;"]},"metadata":{},"sourceType":"module"}