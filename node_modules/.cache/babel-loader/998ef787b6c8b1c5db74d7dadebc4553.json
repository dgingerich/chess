{"ast":null,"code":"import PawnFactory from \"./Pieces/Pawn\";\nimport RookFactory from \"./Pieces/Rook\";\nimport KnightFactory from \"./Pieces/Knight\";\nimport BishopFactory from \"./Pieces/Bishop\";\nimport QueenFactory from \"./Pieces/Queen\";\nimport KingFactory from \"./Pieces/King\";\n\nconst BoardFactory = () => {\n  const initializeBoard = () => {\n    return [[RookFactory('black'), KnightFactory('black'), BishopFactory('black'), QueenFactory('black'), KingFactory('black'), BishopFactory('black'), KnightFactory('black'), RookFactory('black')], [PawnFactory('black'), PawnFactory('black'), PawnFactory('black'), PawnFactory('black'), PawnFactory('black'), PawnFactory('black'), PawnFactory('black'), PawnFactory('black')], [null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null], [PawnFactory('white'), PawnFactory('white'), PawnFactory('white'), PawnFactory('white'), PawnFactory('white'), PawnFactory('white'), PawnFactory('white'), PawnFactory('white')], [RookFactory('white'), KnightFactory('white'), BishopFactory('white'), KingFactory('white'), QueenFactory('white'), BishopFactory('white'), KnightFactory('white'), RookFactory('white')]];\n  };\n\n  const boardToString = () => {\n    let boardString = '';\n    console.log('test');\n    /*         board.forEach(row => {\r\n                boardString = boardString.concat('\\n');\r\n                row.forEach(square => {\r\n                    if (square === null) {\r\n                        boardString = boardString.concat('null, ')\r\n                    } else {\r\n                        boardString = boardString.concat(`${square.piece}`);\r\n                    }\r\n                })\r\n            }); */\n\n    return boardString;\n  };\n\n  return Object.create({\n    board: initializeBoard(),\n    test: 'test',\n    boardToString: boardToString()\n  });\n};\n\n_c = BoardFactory;\nexport default BoardFactory;\n\nvar _c;\n\n$RefreshReg$(_c, \"BoardFactory\");","map":{"version":3,"sources":["C:/Users/dging/Programming/chess/src/model/Board.js"],"names":["PawnFactory","RookFactory","KnightFactory","BishopFactory","QueenFactory","KingFactory","BoardFactory","initializeBoard","boardToString","boardString","console","log","Object","create","board","test"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,eAAxB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,WAAP,MAAwB,eAAxB;;AAEA,MAAMC,YAAY,GAAG,MAAM;AAEvB,QAAMC,eAAe,GAAG,MAAM;AAC1B,WAAQ,CACJ,CAACN,WAAW,CAAC,OAAD,CAAZ,EAAuBC,aAAa,CAAC,OAAD,CAApC,EAA+CC,aAAa,CAAC,OAAD,CAA5D,EAAuEC,YAAY,CAAC,OAAD,CAAnF,EAA8FC,WAAW,CAAC,OAAD,CAAzG,EAAoHF,aAAa,CAAC,OAAD,CAAjI,EAA4ID,aAAa,CAAC,OAAD,CAAzJ,EAAoKD,WAAW,CAAC,OAAD,CAA/K,CADI,EAEJ,CAACD,WAAW,CAAC,OAAD,CAAZ,EAAuBA,WAAW,CAAC,OAAD,CAAlC,EAA6CA,WAAW,CAAC,OAAD,CAAxD,EAAmEA,WAAW,CAAC,OAAD,CAA9E,EAAyFA,WAAW,CAAC,OAAD,CAApG,EAA+GA,WAAW,CAAC,OAAD,CAA1H,EAAqIA,WAAW,CAAC,OAAD,CAAhJ,EAA2JA,WAAW,CAAC,OAAD,CAAtK,CAFI,EAGJ,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,EAAyB,IAAzB,EAA+B,IAA/B,EAAqC,IAArC,EAA2C,IAA3C,CAHI,EAIJ,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,EAAyB,IAAzB,EAA+B,IAA/B,EAAqC,IAArC,EAA2C,IAA3C,CAJI,EAKJ,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,EAAyB,IAAzB,EAA+B,IAA/B,EAAqC,IAArC,EAA2C,IAA3C,CALI,EAMJ,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,EAAyB,IAAzB,EAA+B,IAA/B,EAAqC,IAArC,EAA2C,IAA3C,CANI,EAOJ,CAACA,WAAW,CAAC,OAAD,CAAZ,EAAuBA,WAAW,CAAC,OAAD,CAAlC,EAA6CA,WAAW,CAAC,OAAD,CAAxD,EAAmEA,WAAW,CAAC,OAAD,CAA9E,EAAyFA,WAAW,CAAC,OAAD,CAApG,EAA+GA,WAAW,CAAC,OAAD,CAA1H,EAAqIA,WAAW,CAAC,OAAD,CAAhJ,EAA2JA,WAAW,CAAC,OAAD,CAAtK,CAPI,EAQJ,CAACC,WAAW,CAAC,OAAD,CAAZ,EAAuBC,aAAa,CAAC,OAAD,CAApC,EAA+CC,aAAa,CAAC,OAAD,CAA5D,EAAuEE,WAAW,CAAC,OAAD,CAAlF,EAA6FD,YAAY,CAAC,OAAD,CAAzG,EAAoHD,aAAa,CAAC,OAAD,CAAjI,EAA4ID,aAAa,CAAC,OAAD,CAAzJ,EAAoKD,WAAW,CAAC,OAAD,CAA/K,CARI,CAAR;AAUH,GAXD;;AAaA,QAAMO,aAAa,GAAG,MAAM;AAGxB,QAAIC,WAAW,GAAG,EAAlB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AAER;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEQ,WAAOF,WAAP;AACH,GAlBD;;AAoBA,SAAOG,MAAM,CAACC,MAAP,CAAc;AACjBC,IAAAA,KAAK,EAAEP,eAAe,EADL;AAEjBQ,IAAAA,IAAI,EAAE,MAFW;AAGjBP,IAAAA,aAAa,EAAEA,aAAa;AAHX,GAAd,CAAP;AAMH,CAzCD;;KAAMF,Y;AA2CN,eAAeA,YAAf","sourcesContent":["import PawnFactory from \"./Pieces/Pawn\";\r\nimport RookFactory from \"./Pieces/Rook\";\r\nimport KnightFactory from \"./Pieces/Knight\";\r\nimport BishopFactory from \"./Pieces/Bishop\";\r\nimport QueenFactory from \"./Pieces/Queen\";\r\nimport KingFactory from \"./Pieces/King\";\r\n\r\nconst BoardFactory = () => {\r\n\r\n    const initializeBoard = () => {\r\n        return ([\r\n            [RookFactory('black'), KnightFactory('black'), BishopFactory('black'), QueenFactory('black'), KingFactory('black'), BishopFactory('black'), KnightFactory('black'), RookFactory('black')],\r\n            [PawnFactory('black'), PawnFactory('black'), PawnFactory('black'), PawnFactory('black'), PawnFactory('black'), PawnFactory('black'), PawnFactory('black'), PawnFactory('black')],\r\n            [null, null, null, null, null, null, null, null],\r\n            [null, null, null, null, null, null, null, null],\r\n            [null, null, null, null, null, null, null, null],\r\n            [null, null, null, null, null, null, null, null],\r\n            [PawnFactory('white'), PawnFactory('white'), PawnFactory('white'), PawnFactory('white'), PawnFactory('white'), PawnFactory('white'), PawnFactory('white'), PawnFactory('white')],\r\n            [RookFactory('white'), KnightFactory('white'), BishopFactory('white'), KingFactory('white'), QueenFactory('white'), BishopFactory('white'), KnightFactory('white'), RookFactory('white')]\r\n        ])\r\n    }\r\n\r\n    const boardToString = () => {\r\n        \r\n        \r\n        let boardString = '';\r\n        console.log('test');\r\n\r\n/*         board.forEach(row => {\r\n            boardString = boardString.concat('\\n');\r\n            row.forEach(square => {\r\n                if (square === null) {\r\n                    boardString = boardString.concat('null, ')\r\n                } else {\r\n                    boardString = boardString.concat(`${square.piece}`);\r\n                }\r\n            })\r\n        }); */\r\n        \r\n        return boardString;        \r\n    }\r\n\r\n    return Object.create({\r\n        board: initializeBoard(),\r\n        test: 'test',\r\n        boardToString: boardToString()\r\n    })\r\n\r\n}\r\n\r\nexport default BoardFactory;"]},"metadata":{},"sourceType":"module"}