{"ast":null,"code":"import PawnFactory from \"./Pieces/Pawn\";\nimport RookFactory from \"./Pieces/Rook\";\nimport KnightFactory from \"./Pieces/Knight\";\nimport BishopFactory from \"./Pieces/Bishop\";\nimport QueenFactory from \"./Pieces/Queen\";\nimport KingFactory from \"./Pieces/King\";\nimport deepCopy from \"./core/deepCopy\";\n\nconst ChessFactory = () => {\n  const initializeBoard = () => {\n    return [[RookFactory('white'), PawnFactory('white'), null, null, null, null, PawnFactory('black'), RookFactory('black')], [KnightFactory('white'), PawnFactory('white'), null, null, null, null, PawnFactory('black'), KnightFactory('black')], [BishopFactory('white'), PawnFactory('white'), null, null, null, null, PawnFactory('black'), BishopFactory('black')], [QueenFactory('white'), PawnFactory('white'), null, null, null, null, PawnFactory('black'), QueenFactory('black')], [KingFactory('white'), PawnFactory('white'), null, null, null, null, PawnFactory('black'), KingFactory('black')], [nuull, PawnFactory('white'), null, null, null, null, PawnFactory('black'), BishopFactory('black')], [KnightFactory('white'), PawnFactory('white'), null, null, null, null, PawnFactory('black'), KnightFactory('black')], [RookFactory('white'), PawnFactory('white'), null, null, null, null, PawnFactory('black'), RookFactory('black')]];\n  }; //Generates list of moves given a board setup and the color of the current turn\n  //Checks if player is in check after move\n\n\n  const generateImmediateMoves = (board, turn) => {\n    let movesList = [];\n\n    for (let x = 0; x < 8; x = x + 1) {\n      for (let y = 0; y < 8; y = y + 1) {\n        if (board[x][y] !== null && board[x][y].color === turn) {\n          let position = [x, y];\n          movesList = movesList.concat(board[x][y].getMoves(board, position));\n        }\n      }\n    }\n\n    return movesList;\n  }; //Generates list of legal moves, given the current turn and board\n  //Legal move takes the form of [initialPosition, finalPosition]\n\n\n  const generateLegalMovesList = (board, turn, moveHistory) => {\n    let legalMovesList = generateImmediateMoves(board, turn);\n    let illegalMovesList = []; //Loops through all moves and generates a new board for after each move\n    //Checks if player is in check \n    //If any of the opposing player's possible moves on the new board attack the player's king, move is illegal\n    //Adds illigal moves to illegalMovesList, then removes moves in illegalMovesList from movesList\n\n    for (let i = 0; i < legalMovesList.length; i = i + 1) {\n      let move = legalMovesList[i];\n      let resultingBoard = deepCopy(board);\n      let positionOfKingOnResultingBoard;\n      let nextTurn = turn === 'white' ? 'black' : 'white'; //resultingBoard is the board after the current move being looped has been played\n\n      resultingBoard[move[1][0]][move[1][1]] = resultingBoard[move[0][0]][move[0][1]];\n      resultingBoard[move[0][0]][move[0][1]] = null; //Gets location of current player's king on resultingBoard\n\n      for (let x = 0; x < 8; x = x + 1) {\n        for (let y = 0; y < 8; y = y + 1) {\n          if (resultingBoard[x][y] !== null && resultingBoard[x][y].color === turn && resultingBoard[x][y].piece === 'King') {\n            positionOfKingOnResultingBoard = [x, y];\n          }\n        }\n      }\n\n      let inCheck = false; //console.log(legalMovesList[i])\n      //console.log(resultingBoard)\n\n      let nextTurnMovesList = generateImmediateMoves(resultingBoard, nextTurn); //console.log(nextTurnMovesList)\n\n      nextTurnMovesList.forEach(move => {\n        if (JSON.stringify(move[1]) === JSON.stringify(positionOfKingOnResultingBoard)) inCheck = true;\n      });\n      if (inCheck) illegalMovesList.push(legalMovesList[i]);\n    }\n\n    ; //Adds castling moves\n\n    legalMovesList = legalMovesList.concat(checkForCastle(board, turn, moveHistory)); //console.log('Illegal moves: ')\n    //console.log(illegalMoves)\n    //Filters movesList to only include moves that are not in illegalMovesList\n\n    legalMovesList = legalMovesList.filter(move => !illegalMovesList.includes(move));\n    return legalMovesList;\n  };\n\n  const checkForCastle = (board, turn, moveHistory) => {\n    let legalCastlingMoves = [];\n    let ARookInitialPosition = turn === 'white' ? [0, 0] : [0, 7];\n    let HRookInitialPosition = turn === 'white' ? [7, 0] : [7, 7];\n    let kingInitialPosition = turn === 'white' ? [4, 0] : [4, 7]; //King castling long\n\n    if (castleMoveLegal(kingInitialPosition, ARookInitialPosition, board, turn, moveHistory)) {\n      legalCastlingMoves.push( //2D move. First is king, second is rook\n      [kingInitialPosition, [kingInitialPosition[0] - 2, kingInitialPosition[1]]][(ARookInitialPosition, [ARookInitialPosition[0] + 3, ARookInitialPosition[1]])]);\n    } //King castling short\n\n\n    if (castleMoveLegal(kingInitialPosition, HRookInitialPosition, board, turn, moveHistory)) {\n      legalCastlingMoves.push( //2D move. First is king, second is rook\n      [kingInitialPosition, [kingInitialPosition[0] + 2, kingInitialPosition[1]]][(HRookInitialPosition, [HRookInitialPosition[0] - 2, ARookInitialPosition[1]])]);\n    }\n\n    console.log(legalCastlingMoves);\n    return legalCastlingMoves;\n  }; //Checks if castling move is legal, given rook/king pair to castle\n\n\n  const castleMoveLegal = (kingInitialPosition, rookInitialPosition, board, turn, moveHistory) => {\n    let kingHasMoved = hasPieceMoved(kingInitialPosition, moveHistory);\n    let rookHasMoved = hasPieceMoved(rookInitialPosition, moveHistory);\n\n    if (!kingHasMoved && !rookHasMoved) {\n      let squaresKingGoesThrough = []; //Are there pieces between king and rook?\n\n      let squaresBetweenOccupied = false; //Loops through all squares between x value of king's initial position and rook's initial position\n\n      for (let x = kingInitialPosition[0] > rookInitialPosition[0] ? kingInitialPosition[0] - 1 : rookInitialPosition[0] - 1; x !== 4 && x !== 0; x = x - 1) {\n        //King moves two squares. If square is within 2 of king initial square, push to squaresKingGoesThrough\n        if (Math.abs(kingInitialPosition[0] - x) <= 2) squaresKingGoesThrough.push([x, kingInitialPosition[1]]); //If square has a piece, the squares between are occupied\n\n        if (board[(x, kingInitialPosition[1])] !== null) squaresBetweenOccupied = true;\n      } //if no positions between them have a piece, check if any squares the king passes are in check\n\n\n      if (!squaresBetweenOccupied) {\n        //Generates other player's moves\n        let otherTurnMoves = generateImmediateMoves(board, !turn);\n        let anyKingSquaresInCheck = false;\n        otherTurnMoves.forEach(move => {\n          squaresKingGoesThrough.forEach(squareKingGoesThrough => {\n            if (JSON.stringify(move[1]) === squareKingGoesThrough) anyKingSquaresInCheck = true;\n          });\n        }); //Only returns true if 1) no pieces are between and 2) no squares the king goes through are in check\n\n        if (anyKingSquaresInCheck === false) return true;\n      }\n    } else {\n      return false;\n    } //Need logic to handle castling moves in legalMovesList\n    //Probably just if any move is a 2d array, both moves are made\n    //Since castling should really only be the only move with two moves\n    //Unless pawn promotion also has two moves? \n\n  }; //Checks if piece has moved, given initial position and history of moves\n\n\n  const hasPieceMoved = (initialPosition, moveHistory) => {\n    let hasMoved = false;\n    moveHistory.forEach(move => {\n      if (move[0] === initialPosition) hasMoved = true;\n    });\n    return hasMoved;\n  }; //Checks if move is in list of legal moves\n\n\n  const moveIsInMovesList = (position1, position2, movesList) => {\n    let moveInMovesList = false;\n    movesList.forEach(move => {\n      if (JSON.stringify(move) === JSON.stringify([position1, position2])) moveInMovesList = true;\n    });\n    return moveInMovesList;\n  }; //Makes move on board, adds move to history\n\n\n  const move = (position1, position2, board) => {\n    //Sets position2 equal to value of position1\n    board[position2[0]][position2[1]] = board[position1[0]][position1[1]]; //Clears position1\n\n    board[position1[0]][position1[1]] = null;\n  };\n\n  const endGame = turn => {\n    alert('End Game');\n  };\n\n  return Object.create({\n    board: initializeBoard(),\n    turn: 'white',\n    legalMovesList: generateImmediateMoves(initializeBoard(), 'white'),\n    moveHistory: [],\n\n    //I'll need to add functions for castling/converting pawn on end rank (should both of those go here?)\n    handleMove(position1, position2) {\n      //If move is in list of legal moves\n      if (moveIsInMovesList(position1, position2, this.legalMovesList)) {\n        //Makes move on board\n        move(position1, position2, this.board, this.moveHistory); //Adds move to move history\n\n        this.moveHistory.push([position1, position2]); //Changes turn\n\n        this.turn === 'white' ? this.turn = 'black' : this.turn = 'white'; //Re-generates movesList for new board and turn\n\n        this.legalMovesList = generateLegalMovesList(this.board, this.turn, this.moveHistory); //if there are no legal moves, the turn at the beginning of the function wins\n\n        if (this.legalMovesList.length === 0) endGame();\n      }\n    },\n\n    printMoves() {\n      this.generateLegalMovesList(this.board, this.turn);\n      console.log(this.legalMovesList);\n    }\n\n  });\n};\n\n_c = ChessFactory;\nexport default ChessFactory;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChessFactory\");","map":{"version":3,"sources":["C:/Users/dging/Programming/chess/src/model/Chess.js"],"names":["PawnFactory","RookFactory","KnightFactory","BishopFactory","QueenFactory","KingFactory","deepCopy","ChessFactory","initializeBoard","nuull","generateImmediateMoves","board","turn","movesList","x","y","color","position","concat","getMoves","generateLegalMovesList","moveHistory","legalMovesList","illegalMovesList","i","length","move","resultingBoard","positionOfKingOnResultingBoard","nextTurn","piece","inCheck","nextTurnMovesList","forEach","JSON","stringify","push","checkForCastle","filter","includes","legalCastlingMoves","ARookInitialPosition","HRookInitialPosition","kingInitialPosition","castleMoveLegal","console","log","rookInitialPosition","kingHasMoved","hasPieceMoved","rookHasMoved","squaresKingGoesThrough","squaresBetweenOccupied","Math","abs","otherTurnMoves","anyKingSquaresInCheck","squareKingGoesThrough","initialPosition","hasMoved","moveIsInMovesList","position1","position2","moveInMovesList","endGame","alert","Object","create","handleMove","printMoves"],"mappings":"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","sourcesContent":["import PawnFactory from \"./Pieces/Pawn\";\r\nimport RookFactory from \"./Pieces/Rook\";\r\nimport KnightFactory from \"./Pieces/Knight\";\r\nimport BishopFactory from \"./Pieces/Bishop\";\r\nimport QueenFactory from \"./Pieces/Queen\";\r\nimport KingFactory from \"./Pieces/King\";\r\nimport deepCopy from \"./core/deepCopy\";\r\n\r\nconst ChessFactory = () => {\r\n\r\n    const initializeBoard = () => {\r\n        return ([\r\n            [RookFactory('white'), PawnFactory('white'), null, null, null, null, PawnFactory('black'), RookFactory('black')],\r\n            [KnightFactory('white'), PawnFactory('white'), null, null, null, null, PawnFactory('black'), KnightFactory('black')],\r\n            [BishopFactory('white'), PawnFactory('white'), null, null, null, null, PawnFactory('black'), BishopFactory('black')],\r\n            [QueenFactory('white'), PawnFactory('white'), null, null, null, null, PawnFactory('black'), QueenFactory('black')],\r\n            [KingFactory('white'), PawnFactory('white'), null, null, null, null, PawnFactory('black'), KingFactory('black')],\r\n            [nuull, PawnFactory('white'), null, null, null, null, PawnFactory('black'), BishopFactory('black')],\r\n            [KnightFactory('white'), PawnFactory('white'), null, null, null, null, PawnFactory('black'), KnightFactory('black')],\r\n            [RookFactory('white'), PawnFactory('white'), null, null, null, null, PawnFactory('black'), RookFactory('black')],\r\n        ]);\r\n    };\r\n\r\n    //Generates list of moves given a board setup and the color of the current turn\r\n    //Checks if player is in check after move\r\n    const generateImmediateMoves = (board, turn) => {\r\n\r\n        let movesList = [];\r\n\r\n        for (let x = 0; x < 8; x = x + 1) {\r\n            for (let y = 0; y < 8; y = y + 1) {\r\n                if (board[x][y] !== null && board[x][y].color === turn) {\r\n                    let position = [x, y];\r\n                    movesList = movesList.concat(board[x][y].getMoves(board, position));\r\n                }\r\n            }\r\n        }\r\n\r\n        return movesList;\r\n    }\r\n\r\n    //Generates list of legal moves, given the current turn and board\r\n    //Legal move takes the form of [initialPosition, finalPosition]\r\n    const generateLegalMovesList = (board, turn, moveHistory) => {\r\n        let legalMovesList = generateImmediateMoves(board, turn);\r\n\r\n        let illegalMovesList = [];\r\n\r\n        //Loops through all moves and generates a new board for after each move\r\n        //Checks if player is in check \r\n        //If any of the opposing player's possible moves on the new board attack the player's king, move is illegal\r\n        //Adds illigal moves to illegalMovesList, then removes moves in illegalMovesList from movesList\r\n        for (let i = 0; i < legalMovesList.length; i = i + 1) {\r\n            let move = legalMovesList[i];\r\n            let resultingBoard = deepCopy(board);\r\n            let positionOfKingOnResultingBoard;\r\n            let nextTurn = (turn === 'white') ? 'black' : 'white';\r\n\r\n            //resultingBoard is the board after the current move being looped has been played\r\n            resultingBoard[move[1][0]][move[1][1]] = resultingBoard[move[0][0]][move[0][1]];\r\n            resultingBoard[move[0][0]][move[0][1]] = null;\r\n\r\n            //Gets location of current player's king on resultingBoard\r\n            for (let x = 0; x < 8; x = x + 1) {\r\n                for (let y = 0; y < 8; y = y + 1) {\r\n                    if (resultingBoard[x][y] !== null && resultingBoard[x][y].color === turn && resultingBoard[x][y].piece === 'King') {\r\n                        positionOfKingOnResultingBoard = [x, y];\r\n                    }\r\n                }\r\n            }\r\n\r\n            let inCheck = false;\r\n            //console.log(legalMovesList[i])\r\n            //console.log(resultingBoard)\r\n            let nextTurnMovesList = generateImmediateMoves(resultingBoard, nextTurn);\r\n            //console.log(nextTurnMovesList)\r\n\r\n            nextTurnMovesList.forEach(move => {\r\n                if (JSON.stringify(move[1]) === JSON.stringify(positionOfKingOnResultingBoard)) inCheck = true;\r\n            });\r\n\r\n            if (inCheck) illegalMovesList.push(legalMovesList[i]);\r\n\r\n        };\r\n\r\n        //Adds castling moves\r\n        legalMovesList = legalMovesList.concat(checkForCastle(board, turn, moveHistory));\r\n        //console.log('Illegal moves: ')\r\n        //console.log(illegalMoves)\r\n\r\n        //Filters movesList to only include moves that are not in illegalMovesList\r\n        legalMovesList = legalMovesList.filter((move) => !illegalMovesList.includes(move));\r\n\r\n\r\n\r\n        return legalMovesList\r\n    }\r\n\r\n    const checkForCastle = (board, turn, moveHistory) => {\r\n\r\n        let legalCastlingMoves = [];\r\n\r\n        let ARookInitialPosition = turn === 'white' ? [0, 0] : [0, 7];\r\n        let HRookInitialPosition = turn === 'white' ? [7, 0] : [7, 7];\r\n        let kingInitialPosition = turn === 'white' ? [4, 0] : [4, 7];\r\n\r\n        //King castling long\r\n        if (castleMoveLegal(kingInitialPosition, ARookInitialPosition, board, turn, moveHistory)) {\r\n            legalCastlingMoves.push(\r\n                //2D move. First is king, second is rook\r\n                [kingInitialPosition, [kingInitialPosition[0] - 2, kingInitialPosition[1]]][ARookInitialPosition, [ARookInitialPosition[0] + 3, ARookInitialPosition[1]]]\r\n            );\r\n        }\r\n\r\n        //King castling short\r\n        if (castleMoveLegal(kingInitialPosition, HRookInitialPosition, board, turn, moveHistory)) {\r\n            legalCastlingMoves.push(\r\n                //2D move. First is king, second is rook\r\n                [kingInitialPosition, [kingInitialPosition[0] + 2, kingInitialPosition[1]]][HRookInitialPosition, [HRookInitialPosition[0] - 2, ARookInitialPosition[1]]]\r\n            );\r\n        }\r\n\r\n        console.log(legalCastlingMoves)\r\n        return legalCastlingMoves;\r\n    }\r\n\r\n    //Checks if castling move is legal, given rook/king pair to castle\r\n    const castleMoveLegal = (kingInitialPosition, rookInitialPosition, board, turn, moveHistory) => {\r\n\r\n        let kingHasMoved = hasPieceMoved(kingInitialPosition, moveHistory);\r\n        let rookHasMoved = hasPieceMoved(rookInitialPosition, moveHistory);\r\n\r\n        if (!kingHasMoved && !rookHasMoved) {\r\n            let squaresKingGoesThrough = [];\r\n            //Are there pieces between king and rook?\r\n            let squaresBetweenOccupied = false;\r\n\r\n            //Loops through all squares between x value of king's initial position and rook's initial position\r\n            for (let x = kingInitialPosition[0] > rookInitialPosition[0] ? kingInitialPosition[0] - 1 : rookInitialPosition[0] - 1; x !== 4 && x !== 0; x = x - 1) {\r\n                //King moves two squares. If square is within 2 of king initial square, push to squaresKingGoesThrough\r\n                if (Math.abs(kingInitialPosition[0] - x) <= 2) squaresKingGoesThrough.push([x, kingInitialPosition[1]]);\r\n                //If square has a piece, the squares between are occupied\r\n                if (board[x, kingInitialPosition[1]] !== null) squaresBetweenOccupied = true;\r\n            }\r\n\r\n            //if no positions between them have a piece, check if any squares the king passes are in check\r\n            if (!squaresBetweenOccupied) {\r\n                //Generates other player's moves\r\n                let otherTurnMoves = generateImmediateMoves(board, !turn);\r\n                let anyKingSquaresInCheck = false;\r\n                otherTurnMoves.forEach(move => {\r\n                    squaresKingGoesThrough.forEach(squareKingGoesThrough => {\r\n                        if (JSON.stringify(move[1]) === squareKingGoesThrough) anyKingSquaresInCheck = true;\r\n                    });\r\n                });\r\n\r\n                //Only returns true if 1) no pieces are between and 2) no squares the king goes through are in check\r\n                if (anyKingSquaresInCheck === false) return true;\r\n            }\r\n        } else {\r\n            return false;\r\n        }\r\n \r\n        //Need logic to handle castling moves in legalMovesList\r\n        //Probably just if any move is a 2d array, both moves are made\r\n        //Since castling should really only be the only move with two moves\r\n        //Unless pawn promotion also has two moves? \r\n    }\r\n\r\n    //Checks if piece has moved, given initial position and history of moves\r\n    const hasPieceMoved = (initialPosition, moveHistory) => {\r\n        let hasMoved = false;\r\n\r\n        moveHistory.forEach(move => {\r\n            if (move[0] === initialPosition) hasMoved = true;\r\n        });\r\n\r\n        return hasMoved;\r\n    }\r\n\r\n    //Checks if move is in list of legal moves\r\n    const moveIsInMovesList = (position1, position2, movesList) => {\r\n\r\n        let moveInMovesList = false;\r\n\r\n        movesList.forEach(move => {\r\n            if (JSON.stringify(move) === JSON.stringify([position1, position2])) moveInMovesList = true;\r\n        });\r\n\r\n        return moveInMovesList;\r\n    }\r\n\r\n    //Makes move on board, adds move to history\r\n    const move = (position1, position2, board) => {\r\n        //Sets position2 equal to value of position1\r\n        board[position2[0]][position2[1]] = board[position1[0]][position1[1]];\r\n        //Clears position1\r\n        board[position1[0]][position1[1]] = null;\r\n    }\r\n\r\n    const endGame = (turn) => {\r\n        alert('End Game')\r\n    }\r\n\r\n    return Object.create({\r\n        board: initializeBoard(),\r\n        turn: 'white',\r\n        legalMovesList: generateImmediateMoves(initializeBoard(), 'white'),\r\n        moveHistory: [],\r\n\r\n        //I'll need to add functions for castling/converting pawn on end rank (should both of those go here?)\r\n        handleMove(position1, position2) {\r\n\r\n            //If move is in list of legal moves\r\n            if (moveIsInMovesList(position1, position2, this.legalMovesList)) {\r\n                //Makes move on board\r\n                move(position1, position2, this.board, this.moveHistory);\r\n\r\n                //Adds move to move history\r\n                this.moveHistory.push([position1, position2]);\r\n\r\n                //Changes turn\r\n                this.turn === 'white' ? this.turn = 'black' : this.turn = 'white';\r\n\r\n                //Re-generates movesList for new board and turn\r\n                this.legalMovesList = generateLegalMovesList(this.board, this.turn, this.moveHistory);\r\n\r\n                //if there are no legal moves, the turn at the beginning of the function wins\r\n                if (this.legalMovesList.length === 0) endGame();\r\n            }\r\n        },\r\n        printMoves() {\r\n            this.generateLegalMovesList(this.board, this.turn);\r\n            console.log(this.legalMovesList);\r\n        }\r\n    })\r\n\r\n}\r\n\r\nexport default ChessFactory;"]},"metadata":{},"sourceType":"module"}