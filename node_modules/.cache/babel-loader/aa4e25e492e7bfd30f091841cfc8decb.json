{"ast":null,"code":"const PawnFactory = color => {\n  //Generates moves in a certain direction in increments\n  const generateMoves = (board, position, color) => {\n    let moves = [];\n    let x = position[0];\n    let y = position[1]; //White pawns go up, black pawns go down\n\n    let direction = color === 'white' ? 1 : -1;\n    console.log(direction); //Move forward if square is open\n\n    if (board[x][y + direction] === null) {\n      moves.push([x, y + direction]);\n    } //Diagonally capture piece to the left \n\n\n    if (x - 1 >= 0 && board[x - 1][y + direction] !== null && board[x - 1][y + direction].color !== color) {\n      moves.push([x - 1, y + direction]);\n    } //Diagonally capture piece to the right\n\n\n    if (x + 1 < 8 && board[x + 1][y + direction] !== null && board[x + 1][y + direction].color !== color) {\n      moves.push([x + 1, y + direction]);\n    }\n\n    return moves;\n  };\n\n  return Object.create({\n    color: color,\n    piece: 'Pawn',\n\n    //Position a two value array starting from lower left quadrant\n    getMoves(board, position) {\n      let moves = [];\n      moves = generateMoves(board, position, this.color);\n      return moves;\n    }\n\n  });\n};\n\n_c = PawnFactory;\nexport default PawnFactory;\n\nvar _c;\n\n$RefreshReg$(_c, \"PawnFactory\");","map":{"version":3,"sources":["C:/Users/dging/Programming/chess/src/model/Pieces/Pawn.js"],"names":["PawnFactory","color","generateMoves","board","position","moves","x","y","direction","console","log","push","Object","create","piece","getMoves"],"mappings":"AACA,MAAMA,WAAW,GAAIC,KAAD,IAAW;AAE3B;AACA,QAAMC,aAAa,GAAG,CAACC,KAAD,EAAQC,QAAR,EAAkBH,KAAlB,KAA4B;AAC9C,QAAII,KAAK,GAAG,EAAZ;AACA,QAAIC,CAAC,GAAGF,QAAQ,CAAC,CAAD,CAAhB;AACA,QAAIG,CAAC,GAAGH,QAAQ,CAAC,CAAD,CAAhB,CAH8C,CAI9C;;AACA,QAAII,SAAS,GAAIP,KAAK,KAAK,OAAX,GAAsB,CAAtB,GAA0B,CAAC,CAA3C;AACAQ,IAAAA,OAAO,CAACC,GAAR,CAAYF,SAAZ,EAN8C,CAQ9C;;AACA,QAAIL,KAAK,CAACG,CAAD,CAAL,CAASC,CAAC,GAAGC,SAAb,MAA4B,IAAhC,EAAsC;AAClCH,MAAAA,KAAK,CAACM,IAAN,CAAW,CAACL,CAAD,EAAIC,CAAC,GAAGC,SAAR,CAAX;AACH,KAX6C,CAY9C;;;AACA,QAAIF,CAAC,GAAG,CAAJ,IAAS,CAAT,IAAcH,KAAK,CAACG,CAAC,GAAG,CAAL,CAAL,CAAaC,CAAC,GAAGC,SAAjB,MAAgC,IAA9C,IAAsDL,KAAK,CAACG,CAAC,GAAG,CAAL,CAAL,CAAaC,CAAC,GAAGC,SAAjB,EAA4BP,KAA5B,KAAsCA,KAAhG,EAAuG;AACnGI,MAAAA,KAAK,CAACM,IAAN,CAAW,CAACL,CAAC,GAAG,CAAL,EAAQC,CAAC,GAAGC,SAAZ,CAAX;AACH,KAf6C,CAgB9C;;;AACA,QAAIF,CAAC,GAAG,CAAJ,GAAQ,CAAR,IAAaH,KAAK,CAACG,CAAC,GAAG,CAAL,CAAL,CAAaC,CAAC,GAAGC,SAAjB,MAAgC,IAA7C,IAAqDL,KAAK,CAACG,CAAC,GAAG,CAAL,CAAL,CAAaC,CAAC,GAAGC,SAAjB,EAA4BP,KAA5B,KAAsCA,KAA/F,EAAsG;AAClGI,MAAAA,KAAK,CAACM,IAAN,CAAW,CAACL,CAAC,GAAG,CAAL,EAAQC,CAAC,GAAGC,SAAZ,CAAX;AACH;;AAED,WAAOH,KAAP;AACH,GAtBD;;AAwBA,SAAOO,MAAM,CAACC,MAAP,CAAc;AACjBZ,IAAAA,KAAK,EAAEA,KADU;AAEjBa,IAAAA,KAAK,EAAE,MAFU;;AAIjB;AACAC,IAAAA,QAAQ,CAACZ,KAAD,EAAQC,QAAR,EAAkB;AACtB,UAAIC,KAAK,GAAG,EAAZ;AAEAA,MAAAA,KAAK,GAAGH,aAAa,CAACC,KAAD,EAAQC,QAAR,EAAkB,KAAKH,KAAvB,CAArB;AAEA,aAAOI,KAAP;AACH;;AAXgB,GAAd,CAAP;AAaH,CAxCD;;KAAML,W;AA0CN,eAAeA,WAAf","sourcesContent":["\r\nconst PawnFactory = (color) => {\r\n\r\n    //Generates moves in a certain direction in increments\r\n    const generateMoves = (board, position, color) => {\r\n        let moves = [];\r\n        let x = position[0];\r\n        let y = position[1];\r\n        //White pawns go up, black pawns go down\r\n        let direction = (color === 'white') ? 1 : -1;\r\n        console.log(direction)\r\n\r\n        //Move forward if square is open\r\n        if (board[x][y + direction] === null) {\r\n            moves.push([x, y + direction]);\r\n        }\r\n        //Diagonally capture piece to the left \r\n        if (x - 1 >= 0 && board[x - 1][y + direction] !== null && board[x - 1][y + direction].color !== color) {\r\n            moves.push([x - 1, y + direction]);\r\n        } \r\n        //Diagonally capture piece to the right\r\n        if (x + 1 < 8 && board[x + 1][y + direction] !== null && board[x + 1][y + direction].color !== color) {\r\n            moves.push([x + 1, y + direction]);\r\n        }\r\n\r\n        return moves;\r\n    }\r\n\r\n    return Object.create({\r\n        color: color,\r\n        piece: 'Pawn',\r\n\r\n        //Position a two value array starting from lower left quadrant\r\n        getMoves(board, position) {\r\n            let moves = [];\r\n\r\n            moves = generateMoves(board, position, this.color);\r\n\r\n            return moves;\r\n        }\r\n    })\r\n}\r\n\r\nexport default PawnFactory;"]},"metadata":{},"sourceType":"module"}