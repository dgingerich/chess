{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dging\\\\Programming\\\\chess\\\\src\\\\components\\\\Board.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Square from './Square';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Board = _ref => {\n  _s();\n\n  let {\n    chess\n  } = _ref;\n  const [board, setBoard] = useState();\n  const [selectedSquare, setSelectedSquare] = useState('');\n\n  const printSquare = (x, y) => {\n    console.log([x, y]);\n\n    try {\n      console.log(board[x][y].color + ' ' + board[x][y].piece);\n    } catch {\n      console.log('Empty');\n    }\n  }; //Determines whether to change selectedSquare\n\n\n  const handleClick = (x, y) => {\n    setSelectedSquare([x, y]);\n  }; //Logic after selectedSquare changes\n\n\n  useEffect(() => {\n    printSquare(selectedSquare[0], selectedSquare[1]);\n  }, [selectedSquare]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: board.map((column, y) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex'\n        },\n        children: [column.map((square, x) => {\n          //row is 7 - y to make white on the bottom and black on top\n          //essentially iterates from top of board (black) down (white)\n          return /*#__PURE__*/_jsxDEV(Square, {\n            square: board[x][7 - y],\n            position: [x, y],\n            onClick: () => handleClick(x, 7 - y),\n            isSelected: selectedSquare[0] === x && selectedSquare[1] === 7 - y ? true : false\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 36\n          }, this);\n        }), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 21\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Board, \"/RaAcHpcCAK7FtEvYhxr0IVX0Ks=\");\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["C:/Users/dging/Programming/chess/src/components/Board.js"],"names":["React","useState","useEffect","Square","Board","chess","board","setBoard","selectedSquare","setSelectedSquare","printSquare","x","y","console","log","color","piece","handleClick","map","column","display","square"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,MAAP,MAAmB,UAAnB;;;AAEA,MAAMC,KAAK,GAAG,QAAe;AAAA;;AAAA,MAAd;AAAEC,IAAAA;AAAF,GAAc;AAEzB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,EAAlC;AACA,QAAM,CAACO,cAAD,EAAiBC,iBAAjB,IAAsCR,QAAQ,CAAC,EAAD,CAApD;;AAEA,QAAMS,WAAW,GAAG,CAACC,CAAD,EAAIC,CAAJ,KAAU;AAC1BC,IAAAA,OAAO,CAACC,GAAR,CAAY,CAACH,CAAD,EAAIC,CAAJ,CAAZ;;AACA,QAAI;AACJC,MAAAA,OAAO,CAACC,GAAR,CAAYR,KAAK,CAACK,CAAD,CAAL,CAASC,CAAT,EAAYG,KAAZ,GAAoB,GAApB,GAA0BT,KAAK,CAACK,CAAD,CAAL,CAASC,CAAT,EAAYI,KAAlD;AACC,KAFD,CAEE,MAAM;AACJH,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACH;AACJ,GAPD,CALyB,CAczB;;;AACA,QAAMG,WAAW,GAAG,CAACN,CAAD,EAAIC,CAAJ,KAAU;AAC1BH,IAAAA,iBAAiB,CAAC,CAACE,CAAD,EAAIC,CAAJ,CAAD,CAAjB;AACH,GAFD,CAfyB,CAmBzB;;;AACAV,EAAAA,SAAS,CAAC,MAAM;AACZQ,IAAAA,WAAW,CAACF,cAAc,CAAC,CAAD,CAAf,EAAoBA,cAAc,CAAC,CAAD,CAAlC,CAAX;AACH,GAFQ,EAEN,CAACA,cAAD,CAFM,CAAT;AAIA,sBACI;AAAA,cACKF,KAAK,CAACY,GAAN,CAAU,CAACC,MAAD,EAASP,CAAT,KAAe;AACtB,0BACI;AAAK,QAAA,KAAK,EAAE;AAAEQ,UAAAA,OAAO,EAAE;AAAX,SAAZ;AAAA,mBACKD,MAAM,CAACD,GAAP,CAAW,CAACG,MAAD,EAASV,CAAT,KAAe;AACvB;AACA;AACA,8BAAO,QAAC,MAAD;AAAQ,YAAA,MAAM,EAAEL,KAAK,CAACK,CAAD,CAAL,CAAS,IAAIC,CAAb,CAAhB;AAAiC,YAAA,QAAQ,EAAE,CAACD,CAAD,EAAIC,CAAJ,CAA3C;AAAmD,YAAA,OAAO,EAAE,MAAMK,WAAW,CAACN,CAAD,EAAI,IAAIC,CAAR,CAA7E;AAAyF,YAAA,UAAU,EAAIJ,cAAc,CAAC,CAAD,CAAd,KAAsBG,CAAvB,IAA8BH,cAAc,CAAC,CAAD,CAAd,KAAsB,IAAII,CAAzD,GAA+D,IAA/D,GAAsE;AAA3K;AAAA;AAAA;AAAA;AAAA,kBAAP;AACH,SAJA,CADL,eAMI;AAAA;AAAA;AAAA;AAAA,gBANJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ;AAUH,KAXA;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAgBH,CAxCD;;GAAMR,K;;KAAAA,K;AA0CN,eAAeA,KAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Square from './Square';\r\n\r\nconst Board = ({ chess }) => {\r\n\r\n    const [board, setBoard] = useState();\r\n    const [selectedSquare, setSelectedSquare] = useState('');\r\n\r\n    const printSquare = (x, y) => {\r\n        console.log([x, y]);\r\n        try {\r\n        console.log(board[x][y].color + ' ' + board[x][y].piece);\r\n        } catch {\r\n            console.log('Empty')\r\n        }\r\n    }\r\n\r\n    //Determines whether to change selectedSquare\r\n    const handleClick = (x, y) => {\r\n        setSelectedSquare([x, y]);\r\n    }\r\n\r\n    //Logic after selectedSquare changes\r\n    useEffect(() => {\r\n        printSquare(selectedSquare[0], selectedSquare[1]);\r\n    }, [selectedSquare])\r\n\r\n    return (\r\n        <div>\r\n            {board.map((column, y) => {\r\n                return (\r\n                    <div style={{ display: 'flex' }}>\r\n                        {column.map((square, x) => {\r\n                            //row is 7 - y to make white on the bottom and black on top\r\n                            //essentially iterates from top of board (black) down (white)\r\n                            return <Square square={board[x][7 - y]} position={[x, y]} onClick={() => handleClick(x, 7 - y)} isSelected={((selectedSquare[0] === x) && (selectedSquare[1] === 7 - y)) ? true : false} />\r\n                        })}\r\n                        <br />\r\n                    </div>\r\n                )\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Board;"]},"metadata":{},"sourceType":"module"}